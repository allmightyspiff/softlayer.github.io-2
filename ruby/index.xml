<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ruby on SoftLayer API Examples </title>
    <link>/ruby/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 18 May 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/ruby/orderLB/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/orderLB/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Calculating month-to-date cost of a Virtual_Guest</title>
      <link>/ruby/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/monthtodate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your server id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
virtual_server_id = 12345678
item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]]&amp;quot;).object_with_id(virtual_server_id).getObject
puts &amp;quot;Billing Item for Virtual Server:&amp;quot;
pp item[&#39;billingItem&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:a8ec6ac9c09d88a94b1b5bf10393284e&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Billing Item for Virtual Server:
{&amp;quot;createDate&amp;quot;=&amp;gt;&amp;quot;2016-01-29T12:23:43-06:00&amp;quot;,
 &amp;quot;currentHourlyCharge&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hourlyRecurringFee&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hoursUsed&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/ruby/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/cancelservice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your servers&#39; id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
id_of_virtual_server_to_cancel = FILL_IN_YOUR_SERVERS_ID
begin
   # Substitute :Virtual_Guest for :Hardware_Server if you want to cancel a bare metal server
   item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[id]]&amp;quot;).object_with_id(id_of_virtual_server_to_cancel).getObject
   rescue XMLRPC::FaultException # error will be triggered if item doesn&#39;t exist
   item = false
end
#
# # Then invoke [cancelService](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService) or [cancelItem](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelItem)
if item and item[&#39;billingItem&#39;] and client[:Billing_Item].object_with_id(item[&#39;billingItem&#39;][&#39;id&#39;]).cancelService()
   puts &amp;quot;Cancelled service of #{id_of_virtual_server_to_cancel}&amp;quot;
 else
   puts &amp;quot;#{id_of_virtual_server_to_cancel} Doesn&#39;t exist or is already cancelled&amp;quot;
 end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>/ruby/nextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/nextinvoice/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# SoftLayer library will look to see if these global variables are set when making a connection
# more information here: https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L58

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new

total_amount = client[&#39;Account&#39;].getNextInvoiceTotalAmount
puts &amp;quot;Next invoice total amount: #{total_amount}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:5b3b7b946e37497a1fd07dfb3f249be6&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Next invoice total amount: 250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>/ruby/billingfromproduct/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/billingfromproduct/</guid>
      <description>&lt;p&gt;In the following example we are looking for the Billing Item of an Endurance Storage volume with an ID of 1234567.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# add your network storage id, it can be found by doing this call: http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNasNetworkStorage
network_storage_id = 1234567
#
item = client[:Network_Storage].object_mask(&amp;quot;mask[billingItem[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]]&amp;quot;).object_with_id(network_storage_id).getObject
pp item[&#39;billingItem&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Password Auth</title>
      <link>/ruby/token_auth/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/token_auth/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2

# Create a client
client = SoftLayer::Client.with_password(
    username: &#39;change me&#39;, password: &#39;change me&#39;)

# Test our client
puts client[&#39;Account&#39;].object_mask(&#39;mask[id, apiAuthenticationKeys]&#39;).
    getCurrentUser
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find active VMs of specified creator</title>
      <link>/ruby/find_my_vms/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/find_my_vms/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Code example of how to list virtual instances from a SoftLayer account.
# You can call the script from the command and provide the username you
# want to filter on. The script expects that you have the SoftLayer gem
# installed and have it configured with the credentials you&#39;d like
# to use with SoftLayer.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44.
#
# You can run the script with the username you&#39;d like to check under
# the account you have configured:
# find_my_active_vms userid
#
# The output of the script is in a csv format with commas as the
# column separator.
require &#39;softlayer_api&#39;
require &#39;vine&#39;
require &#39;csv&#39;

client = SoftLayer::Client.new
account_service = client[&#39;Account&#39;]
object_mask = &#39;mask[id,fullyQualifiedDomainName,primaryIpAddress,createDate,billingItem[orderItem[description,order[userRecord[username],id]]]]&#39;

USER_ID = ARGV[0] || client.username

vms = account_service.object_mask(object_mask).getVirtualGuests

csv_string = CSV.generate do |csv|
  csv &amp;lt;&amp;lt; [&#39;VM ID&#39;, &#39;Host&#39;, &#39;Public IP&#39;, &#39;Create Date&#39;] # table headers
  vms.each do |vm|
    creator = vm.access(&#39;billingItem.orderItem.order.userRecord.username&#39;)
    next unless creator == USER_ID
    csv &amp;lt;&amp;lt; [vm[&#39;id&#39;], vm[&#39;fullyQualifiedDomainName&#39;], vm[&#39;primaryIpAddress&#39;], vm[&#39;createDate&#39;]]
  end
end

puts csv_string
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>/ruby/list_packages/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Helper function to fetch through all results from SoftLayer api
# using small page sizes and sleeping before every new page fetch.
def fetch_all(service, method)
  records = []; offset = 0; limit = 10
  loop do
    results = service.result_limit(offset, limit).send(method)
    records += results
    break if results.size &amp;lt; limit
    offset += limit
    sleep 3
  end
  records
end

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
package_service = client[&#39;Product_Package&#39;]

# Show all packages
mask = &#39;mask[id,name,description,itemPrices]&#39;
all_packages = fetch_all(package_service.object_mask(mask), :getAllObjects)

all_packages.each do |package|
  puts &amp;quot;#{package[&#39;id&#39;]} - #{package[&#39;name&#39;]}&amp;quot;
  package[&#39;itemPrices&#39;].each do |price|
    puts &amp;quot;#{price[&#39;id&#39;]} - #{price[&#39;item&#39;][&#39;description&#39;]}&amp;quot;
  end
end

PACKAGE_ID = 126
mask = &#39;mask[id,name,description,items[id,description,keyName,prices[id,locationGroupId]]]&#39;
product_package = package_service.object_mask(mask).object_with_id(PACKAGE_ID).getObject

# Get locations in which package is available
puts &#39;PACKAGE LOCATIONS&#39;
pp package_service.object_with_id(PACKAGE_ID).getLocations

# Show a specific product&#39;s items with prices
product_package[&#39;items&#39;].each do |item|
  puts &amp;quot;#{item[&#39;id&#39;]} - #{item[&#39;description&#39;]} - #{item[&#39;keyName&#39;]}&amp;quot;
  item[&#39;prices&#39;].each do |price|
    puts &amp;quot;\t#{price[&#39;id&#39;]} - locationGroupId: #{price[&#39;locationGroupId&#39;]}&amp;quot;
  end
end

# Will only get the server items for this package
# puts &#39;SERVER ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveServerItems

# Will only get the RAM items for the package
# puts &#39;RAM ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveRamItems

# Get all locations
mask = &#39;mask[id,locations[id,name]]&#39;
puts &#39;ALL LOCATIONS&#39;
pp client[&#39;Location_Group_Pricing&#39;].object_mask(mask).getAllObjects
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining SoftLayer Device Owners</title>
      <link>/ruby/determining_device_owners/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/determining_device_owners/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;vine&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new

billing = client[&#39;Account&#39;]

object_mask = &#39;mask[fullyQualifiedDomainName,billingItem[categoryCode,description,createDate,orderItem[order[userRecord[username]]]]]&#39;

hardware_list = billing.object_mask(object_mask).getHardware
virtual_guest_list = billing.object_mask(object_mask).getVirtualGuests

def describe(item)
  domain_name = item.access(&#39;fullyQualifiedDomainName&#39;) || &#39;no fullyQualifiedDomainName&#39;
  category_code = item.access(&#39;billingItem.categoryCode&#39;) || &#39;no categoryCode&#39;
  description = item.access(&#39;billingItem.description&#39;) || &#39;no description&#39;
  create_date = item.access(&#39;billingItem.createDate&#39;) || &#39;no createDate&#39;
  user_name = item.access(&#39;billingItem.orderItem.order.userRecord.username&#39;) || &#39;no username&#39;

  return &amp;quot;&#39;#{domain_name}&#39;, category code: &#39;#{category_code}&#39;, &amp;quot;\
         &amp;quot;description: &#39;#{description}&#39;, was created by: &#39;#{user_name}&#39; &amp;quot;\
         &amp;quot;on &#39;#{create_date}&#39;&amp;quot;
end

for item in hardware_list do
  puts &amp;quot;Hardware &amp;quot; + describe(item)
end

for item in virtual_guest_list do
  puts &amp;quot;Virtual Guest &amp;quot; + describe(item)
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a virtual server from an existing image template</title>
      <link>/ruby/create_server_from_template/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/create_server_from_template/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

IMAGE_ID = &#39;foobar&#39; # change me. Image template global ID.

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
SoftLayer::Client.default_client = SoftLayer::Client.new

order_template = {
    hostname: &#39;test&#39;,
    domain: &#39;example.com&#39;,
    datacenter: &#39;hou02&#39;,
    cores: 2, # 2 x 2.0 GHz Cores
    memory: 4, # 4GB RAM
    private_network_only: false,
    dedicated_host_only: false,
    #os_reference_code: &#39;CENTOS_6_64&#39;, # CentOS 6.latest minimal (64 bit)
    image_template: SoftLayer::ImageTemplate.template_with_global_id(IMAGE_ID),
    use_local_disk: false, # Use a SAN disk
    hourly: true # Charge me for hourly use, rather than monthly.
}

# Set order template in our order instance,
# Otherwise, you can skip using an order template hash, and just
# set values directly in the order instance like `order.cores = 2`.
order = SoftLayer::VirtualServerOrder.new
order_template.keys.each do |k|
    order.send(&amp;quot;#{k}=&amp;quot;, order_template[k])
end

pp order.verify
# Uncomment to place the order.
# server = order.place_order!
# pp server
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Instances</title>
      <link>/ruby/list_instances/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/list_instances/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
SoftLayer::Client.default_client = SoftLayer::Client.new

pp SoftLayer::VirtualServer.find_servers
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>/ruby/set_permission/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
user_service = client[&#39;User_Customer&#39;]

# List the user permissions
USER_ID = 172536 # Change me. User id of user to inspect.
pp user_service.object_with_id(USER_ID).getPermissions

# add permission
new_permission = { keyName: &#39;TICKET_ADD&#39; }
result = user_service.object_with_id(USER_ID).addPortalPermission(new_permission)
unless result
  puts &#39;Failed to add permission&#39;
  exit 1
end

# list user permissions again
pp user_service.object_with_id(USER_ID).getPermissions
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Server Locate</title>
      <link>/ruby/server_locate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/server_locate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # gem install softlayer_api
require &#39;table_print&#39; # gem install table_print

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
SoftLayer::Client.default_client = SoftLayer::Client.new

servers = SoftLayer::VirtualServer.find_servers(object_mask: &#39;mask[location.pathString]&#39;)
location_info = servers.map do |server|
  datacenter, server_room, rack, slot = server[&#39;location&#39;][&#39;pathString&#39;].split(&#39;.&#39;)
  {
    server: server.fullyQualifiedDomainName,
    data_center: datacenter,
    server_room: server_room,
    rack: rack,
    slot: slot
  }
end


tp location_info
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create child SoftLayer Account</title>
      <link>/ruby/create_account/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/create_account/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new

account_service = client[&#39;Account&#39;]
brand_service = client[&#39;Brand&#39;]

brand = account_service.getBrand

cust_account = {
  brandId: brand[&#39;id&#39;].to_i, # change me
  allowedPptpVpnQuantity: 1,
  claimedTaxExemptTxFlag: false,
  companyName: &#39;&#39;, # change me
  isReseller: 0,
  lateFeeProtectionFlag: true,
  firstName: &#39;&#39;, # change me
  lastName: &#39;&#39;, # change me
  email: &#39;&#39;, # change me
  officePhone: &#39;&#39;, # change me
  address1: &#39;&#39;, # change me
  city: &#39;&#39;, # change me
  state: &#39;&#39;, # change me
  postalCode: &#39;&#39;, # change me
  country: &#39;&#39; # change me
}

puts &#39;&#39;
pp cust_account
puts &#39;&#39;

begin
  result = brand_service.createCustomerAccount(cust_account)
  puts &#39;Result: &#39;
  pp result
rescue Exception =&amp;gt; e
  puts &amp;quot;Error: #{e}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>