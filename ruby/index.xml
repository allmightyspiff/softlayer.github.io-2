<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ruby on SoftLayer API Examples </title>
    <link>/ruby/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Thu, 01 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>/ruby/createVSI/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/createVSI/</guid>
      <description>&lt;p&gt;When you are ready to place the order change &lt;code&gt;verifyOrder(productOrder)&lt;/code&gt; to &lt;code&gt;placeOrder(productOrder)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

productOrder = {
  &#39;virtualGuests&#39; =&amp;gt; [{
     &#39;hostname&#39; =&amp;gt; &#39;testRuby&#39;,
     &#39;domain&#39;   =&amp;gt; &#39;example.com&#39;,
     &#39;primaryBackendNetworkComponent&#39; =&amp;gt; { &#39;networkVlan&#39; =&amp;gt; { &#39;id&#39; =&amp;gt; 1286783 } }
  }],
  &#39;location&#39; =&amp;gt; 1441195,
  &#39;packageId&#39; =&amp;gt; 46,
  &#39;operatingSystemReferenceCode&#39; =&amp;gt; &#39;CENTOS_6_64&#39;, 
  &#39;useHourlyPricing&#39; =&amp;gt; false,
  &#39;prices&#39; =&amp;gt; [
     {&#39;id&#39; =&amp;gt; 1640 }, # 1 x 2.0 GHz Core
     {&#39;id&#39; =&amp;gt; 1644 }, # 1 GB RAM
     {&#39;id&#39; =&amp;gt; 13945 }, # CENTOS_6_64
     {&#39;id&#39; =&amp;gt; 1639 }, # 100 GB (SAN) First Disk
     {&#39;id&#39; =&amp;gt; 2277 }, # 100 GB (SAN) Second Disk
     {&#39;id&#39; =&amp;gt; 50367 }, # 250 GB Bandwidth
     {&#39;id&#39; =&amp;gt; 274 }, # 1 Gbps Public &amp;amp; Private Network Uplinks
     {&#39;id&#39; =&amp;gt; 21 }, # 1 IP Address
     {&#39;id&#39; =&amp;gt; 420 }, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
     {&#39;id&#39; =&amp;gt; 56 }, # Host Ping and TCP Service Monitoring
     {&#39;id&#39; =&amp;gt; 57 }, # Email and Ticket
     {&#39;id&#39; =&amp;gt; 418 }, # NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
     {&#39;id&#39; =&amp;gt; 905 }, # REBOOT_REMOTE_CONSOLE
     {&#39;id&#39; =&amp;gt; 58 }  # AUTOMATED_NOTIFICATION
  ]
}

order = client[&#39;Product_Order&#39;].verifyOrder(productOrder)

pp order

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getLocationPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new
object_filter.set_criteria_for_key_path(&#39;items.prices.locationGroupId&#39;,
	&#39;operation&#39; =&amp;gt; &#39;in&#39;,
        &#39;options&#39; =&amp;gt; [{
        &#39;name&#39; =&amp;gt; &#39;data&#39;,
        &#39;value&#39; =&amp;gt; 1441195
        }])


location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/ruby/getStandardPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getStandardPricing/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new do |object_filter|
  object_filter.accept(&#39;items.prices.locationGroupId&#39;).when_it is_null
end

location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>/ruby/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/enableSnapshots/</guid>
      <description>&lt;p&gt;This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

storageId = 11657445

# Define parameters for snapshot
scheduleType = &#39;WEEKLY&#39;
retentionCount = &#39;20&#39;
minute = &#39;1&#39;
hour = &#39;13&#39;
dayOfWeek = &#39;SUNDAY&#39;

snap = client[&#39;SoftLayer_Network_Storage&#39;]
enable = snap.object_with_id(storageId).enableSnapshots(scheduleType, retentionCount, minute, hour, dayOfWeek)
pp enable 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>/ruby/adjustpool/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/adjustpool/</guid>
      <description>&lt;p&gt;The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
pool_id = 123456

hardwareToAdd = []
hardwareToRemove = []
cloudsToAdd = [ {&#39;id&#39; =&amp;gt; 23123143 } ]
cloudsToRemove = []

addRemove = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;]
item = addRemove.object_with_id(pool_id).requestVdrContentUpdates(hardwareToAdd,hardwareToRemove,cloudsToAdd,cloudsToRemove)

pp item
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>/ruby/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/attach_detach/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
disk_id = 87654321
guest_id = 1234567

attach = client[&#39;SoftLayer_Virtual_Guest&#39;]
item = attach.object_with_id(guest_id).attachDiskImage(disk_id)

pp item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detach the disk simply change &lt;code&gt;attachDiskImage(disk_id)&lt;/code&gt; to &lt;code&gt;detachDiskImage(disk_id)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a support ticket</title>
      <link>/ruby/create_ticket/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/create_ticket/</guid>
      <description>&lt;p&gt;Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket_Subject&#34;&gt;SoftLayer_Ticket_Subject&lt;/a&gt; service. The following example will output all of the Ticket Subjects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

subjects = client[&#39;SoftLayer_Ticket_Subject&#39;]
getSubjects = subjects.getAllObjects()

pp getSubjects
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the Ticket Subject ID you can pass it to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket/createStandardTicket&#34;&gt;createStandardTicket&lt;/a&gt;. In the following example we are opening a ticket under the subject Hardware Firewall Question (ID 1121).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

ticketTemplate = {
	&#39;subjectId&#39; =&amp;gt; 1121,
	&#39;assignedUserId&#39; =&amp;gt; xxxxx,
}

content = &amp;quot;Content of the ticket goes here.&amp;quot;

ticket = client[&#39;SoftLayer_Ticket&#39;]
createTicket = ticket.createStandardTicket(ticketTemplate, content)

pp createTicket

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get IPMI info for BMS</title>
      <link>/ruby/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/get_ipmi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_mask = &#39;mask[networkManagementIpAddress,remoteManagementAccounts[username,password],id,fullyQualifiedDomainName]&#39;

item = client[&#39;SoftLayer_Account&#39;]
getIPMI = item.object_mask(object_mask).getHardware

pp getIPMI
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>/ruby/createBwPool/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/createBwPool/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
object_id = nil

orderTemplate = {
   &#39;accountId&#39; =&amp;gt; xxxxx,
   &#39;bandwidthAllotmentTypeId&#39; =&amp;gt; 2,
   &#39;locationGroupId&#39; =&amp;gt; 1,
   &#39;name&#39; =&amp;gt; &#39;newRubyBwPool&#39;
}

orderPool = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;]
item = orderPool.object_with_id(object_id).createObject(orderTemplate)

pp item
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>/ruby/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/createSnapshot/</guid>
      <description>&lt;p&gt;Trigger a manual snapshot creation of a Block storage volume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

createsnap = client[:Network_Storage_Iscsi].object_with_id(network_storage_id).createSnapshot
pp createsnap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

snapshots = client[:Network_Storage_Iscsi].object_with_id(network_storage_id).getSnapshotsForVolume
pp snapshots
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>/ruby/storage_creds/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/storage_creds/</guid>
      <description>&lt;p&gt;The following script allows you retrieve the username and password for Performance/Endurance Block storage if you have authorized hosts against the storage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
account_service = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;]
object_mask = &#39;mask[allowedHardware[allowedHost[credential]],allowedVirtualGuests[allowedHost[credential]]]&#39;
item = account_service.object_mask(object_mask).object_with_id(network_storage_id).getObject

pp item
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/ruby/orderLB/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/orderLB/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Calculating month-to-date cost of a Virtual_Guest</title>
      <link>/ruby/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/monthtodate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your server id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
virtual_server_id = 12345678
item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]]&amp;quot;).object_with_id(virtual_server_id).getObject
puts &amp;quot;Billing Item for Virtual Server:&amp;quot;
pp item[&#39;billingItem&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:a8ec6ac9c09d88a94b1b5bf10393284e&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Billing Item for Virtual Server:
{&amp;quot;createDate&amp;quot;=&amp;gt;&amp;quot;2016-01-29T12:23:43-06:00&amp;quot;,
 &amp;quot;currentHourlyCharge&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hourlyRecurringFee&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hoursUsed&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/ruby/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/cancelservice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your servers&#39; id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
id_of_virtual_server_to_cancel = FILL_IN_YOUR_SERVERS_ID
begin
   # Substitute :Virtual_Guest for :Hardware_Server if you want to cancel a bare metal server
   item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[id]]&amp;quot;).object_with_id(id_of_virtual_server_to_cancel).getObject
   rescue XMLRPC::FaultException # error will be triggered if item doesn&#39;t exist
   item = false
end
#
# # Then invoke [cancelService](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService) or [cancelItem](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelItem)
if item and item[&#39;billingItem&#39;] and client[:Billing_Item].object_with_id(item[&#39;billingItem&#39;][&#39;id&#39;]).cancelService()
   puts &amp;quot;Cancelled service of #{id_of_virtual_server_to_cancel}&amp;quot;
 else
   puts &amp;quot;#{id_of_virtual_server_to_cancel} Doesn&#39;t exist or is already cancelled&amp;quot;
 end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>/ruby/nextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/nextinvoice/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# SoftLayer library will look to see if these global variables are set when making a connection
# more information here: https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L58

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new

total_amount = client[&#39;Account&#39;].getNextInvoiceTotalAmount
puts &amp;quot;Next invoice total amount: #{total_amount}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:5b3b7b946e37497a1fd07dfb3f249be6&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Next invoice total amount: 250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>