<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Storage on SoftLayer API Examples </title>
    <link>/tags/storage/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 08 Jan 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Interact with SoftLayer Object Storage</title>
      <link>/fog/storage/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/fog/storage/</guid>
      <description>

&lt;h3 id=&#34;create-a-connection-to-softlayer-object-storage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;Create a connection to SoftLayer Object Storage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog/softlayer&#39;
@sl = Fog::Storage[:softlayer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-the-models:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;Use the Models&lt;/h4&gt;

&lt;p&gt;List directories/containers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dirs = @sl.directories
dirs.size # the number of directories      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a directory/container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@sl.directories.create(:key =&amp;gt; &#39;a-container&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a directory/container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
dir.key  # =&amp;gt; &#39;a-container&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
# Pass a string.
dir.files.create(:key =&amp;gt; &#39;data.txt&#39;, :body =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;)
# From a file.
dir.files.create(:key =&amp;gt; &#39;file-data.txt&#39;, :body =&amp;gt; File.open(&#39;/path/to/file-data.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieve an existing file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
file = dir.files.get(&#39;data.txt&#39;)
file.body # =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy a file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;file  = @sl.directories.get(&#39;a-container&#39;).files.get(&#39;data.txt&#39;)
copy = file.copy(&#39;a-container&#39;, &#39;copy-of-data.txt&#39;)
copy.body # =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the files in a directory/container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@sl.directories.get(&#39;a-container&#39;).files
# =&amp;gt; [
#    &amp;lt;Fog::Storage::Softlayer::File
#  key=&amp;quot;a-container/data.txt&amp;quot;,
#  content_length=43,
#  content_type=&amp;quot;text/plain&amp;quot;,
#  content_disposition=nil,
#  etag=&amp;quot;a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1&amp;quot;,
#  last_modified=1970-00-00 00:00:00 -0000,
#  access_control_allow_origin=nil,
#  origin=nil
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a signed [temporary] url for a file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;### NOTE
## Be sure you have set a meta_temp_url_key for your account at least once before
## @sl.post_set_meta_temp_url_key(&#39;someSortaSecretStuffHere&#39;)
### /NOTE

file = @sl.directories.get(&#39;a-container&#39;).files.get(&#39;data.txt&#39;)
file.url(Time.now + 300) # url expires in 5 minutes
# =&amp;gt; &amp;quot;https://dal05.objectstorage.softlayer.net:443/v1/AUTH_1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a/a-container/data.txt?temp_url_sig=1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a&amp;amp;temp_url_expires=1401901023&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete files/objects from a directory/container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories(&#39;a-container&#39;)
dir.files.get(&#39;data.txt&#39;).destroy
dir.files.get(&#39;file-data.txt&#39;).destroy
dir.files.get(&#39;copy-of-data.txt&#39;).destroy
# Must destroy all files/objects before destroying container.
dir.destroy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a block storage (performance ISCSI).

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems
http://sldn.softlayer.com/reference/services/SoftLayer_Location
http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You
http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3
http://sldn.softlayer.com/article/Object-Filters
http://sldn.softlayer.com/article/Python
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc.
location = &amp;quot;AMS01&amp;quot;

# Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc.
storageSize = &amp;quot;40&amp;quot;

# Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.
iops = &amp;quot;100&amp;quot;

# Values &amp;quot;Hyper-V&amp;quot;, &amp;quot;Linux&amp;quot;, &amp;quot;VMWare&amp;quot;, &amp;quot;Windows 2008+&amp;quot;, &amp;quot;Windows GPT&amp;quot;, &amp;quot;Windows 2003&amp;quot;, &amp;quot;Xen&amp;quot;
os = &amp;quot;Linux&amp;quot;

PACKAGE_ID = 222

client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]
packageService = client[&#39;SoftLayer_Product_Package&#39;]
locationService = client[&#39;SoftLayer_Location&#39;]
osService = client[&#39;SoftLayer_Network_Storage_Iscsi_OS_Type&#39;]

objectFilterDatacenter = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: location.lower()}}
objectFilterStorageNfs = {&amp;quot;items&amp;quot;: {&amp;quot;categories&amp;quot;: {&amp;quot;categoryCode&amp;quot;: {&amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iscsi&amp;quot;}}}}
objectFilterOsType = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: os}}

try:
    # Getting the datacenter.
    datacenter = locationService.getDatacenters(filter=objectFilterDatacenter)
    # Getting the performance storage NFS prices.
    itemsStorageNfs = packageService.getItems(id=PACKAGE_ID, filter=objectFilterStorageNfs)
    # Getting the storage space prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_space&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesStorageSpace = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the storage space value is invalid.
    if len(pricesStorageSpace) == 0:
        raise ValueError(&#39;The storage space value: &#39; + storageSize + &#39; GB, is not valid.&#39;)
    # Getting the IOPS prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: iops
                }
            },
            &amp;quot;attributes&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iops&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesIops = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the IOPS value is invalid for the configured storage space.
    if len(pricesIops) == 0:
        raise ValueError(&#39;The IOPS value: &#39; + iops + &#39;, is not valid for the storage space: &#39; + storageSize + &#39; GB.&#39;)
    # Getting the OS.
    os = osService.getAllObjects(filter=objectFilterOsType)
    # Building the order template.
    orderData = {
        &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi&amp;quot;,
        &amp;quot;packageId&amp;quot;: PACKAGE_ID,
        &amp;quot;location&amp;quot;: datacenter[0][&#39;id&#39;],
        &amp;quot;quantity&amp;quot;: 1,
        &amp;quot;prices&amp;quot;: [
            {
                &amp;quot;id&amp;quot;: itemsStorageNfs[0][&#39;prices&#39;][0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesStorageSpace[0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesIops[0][&#39;id&#39;]
            }
        ],
        &amp;quot;osFormatType&amp;quot;: os[0]
    }
    # verifyOrder() will check your order for errors. Replace this with a call to
    # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
    # that you can use for your records.
    response = productOrderService.verifyOrder(orderData)
    print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>