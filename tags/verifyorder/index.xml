<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Verifyorder on SoftLayer API Examples </title>
    <link>/tags/verifyorder/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 18 May 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/ruby/orderLB/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/orderLB/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/rest/orderLB/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/orderLB/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::verifyOrder()&lt;/code&gt;&lt;/a&gt;
Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder
URL: SoftLayer_Product_Order/placeOrder&lt;/p&gt;

&lt;p&gt;In the following example I am ordering a Local Load Balancer 500 VIP connections (PriceId: 2078) in the Dallas 06 Datacenter (locationId: 154820).&lt;/p&gt;

&lt;p&gt;Example CURL using verifyOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example CURL using placeOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/placeOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>/python/createBWpool/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createBWpool/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
# For nice debug output:
from pprint import pprint as pp


# Set the needed values to create a new item
accountId = 111111

# The values for bandwidthAllotmentTypeId are: (1) and (2)
# where: (1) means this allotment is marked as a virtual private rack or
#        (2) bandwidth pooling
bandwidthAllotmentTypeId = 2

# To get locationGroupId, execute: SoftLayer_Location_Group::getAllObjects
locationGroupId = 1
newBandwithPoolName = &#39;newBWpool&#39;

# Create an object template to create the item.
objectTemplate = {
    &#39;accountId&#39;: accountId,
    &#39;bandwidthAllotmentTypeId&#39;: bandwidthAllotmentTypeId,
    &#39;locationGroupId&#39;: locationGroupId,
    &#39;name&#39;: newBandwithPoolName
}

# Creates a new connection to the API service.
client = SoftLayer.Client()

try:
    result = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;].createObject(objectTemplate)
    pp(result)

except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed ... Unable to create a new Bandwidth Pool  faultCode=%s, faultString=%s&#39;
        % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/python/createLBpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createLBpython/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a load balancer

Important manual pages:
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json


# The package to order load balancers.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to
# return just the standard (location agnostic) itemPriceId&#39;s.
# https://gist.github.com/greyhoundforty/a0b55afcab9bc758405e21a39b93c63d
# In my case I am going with &#39;Load Balancer 500 VIP Connections&#39;

prices = [
   {
       &amp;quot;id&amp;quot;: 2078
   }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

orderData = {
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;location&amp;quot;: &amp;quot;DALLAS06&amp;quot;
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>