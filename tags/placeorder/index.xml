<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Placeorder on SoftLayer API Examples </title>
    <link>/tags/placeorder/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 18 May 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/ruby/orderLB/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/orderLB/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/rest/orderLB/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/orderLB/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::verifyOrder()&lt;/code&gt;&lt;/a&gt;
Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder
URL: SoftLayer_Product_Order/placeOrder&lt;/p&gt;

&lt;p&gt;In the following example I am ordering a Local Load Balancer 500 VIP connections (PriceId: 2078) in the Dallas 06 Datacenter (locationId: 154820).&lt;/p&gt;

&lt;p&gt;Example CURL using verifyOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example CURL using placeOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/placeOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>/python/createBWpool/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createBWpool/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
# For nice debug output:
from pprint import pprint as pp


# Set the needed values to create a new item
accountId = 111111

# The values for bandwidthAllotmentTypeId are: (1) and (2)
# where: (1) means this allotment is marked as a virtual private rack or
#        (2) bandwidth pooling
bandwidthAllotmentTypeId = 2

# To get locationGroupId, execute: SoftLayer_Location_Group::getAllObjects
locationGroupId = 1
newBandwithPoolName = &#39;newBWpool&#39;

# Create an object template to create the item.
objectTemplate = {
    &#39;accountId&#39;: accountId,
    &#39;bandwidthAllotmentTypeId&#39;: bandwidthAllotmentTypeId,
    &#39;locationGroupId&#39;: locationGroupId,
    &#39;name&#39;: newBandwithPoolName
}

# Creates a new connection to the API service.
client = SoftLayer.Client()

try:
    result = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;].createObject(objectTemplate)
    pp(result)

except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed ... Unable to create a new Bandwidth Pool  faultCode=%s, faultString=%s&#39;
        % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/python/createLBpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createLBpython/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a load balancer

Important manual pages:
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json


# The package to order load balancers.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to
# return just the standard (location agnostic) itemPriceId&#39;s.
# https://gist.github.com/greyhoundforty/a0b55afcab9bc758405e21a39b93c63d
# In my case I am going with &#39;Load Balancer 500 VIP Connections&#39;

prices = [
   {
       &amp;quot;id&amp;quot;: 2078
   }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

orderData = {
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;location&amp;quot;: &amp;quot;DALLAS06&amp;quot;
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderFirewalls/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();
        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices=1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function placeOrderHardwareFirewall() {
        // http://sldn.softlayer.com/blog/phil/Getting-Started-Firewalls
        // The speed of the firewall needs to match speed of the server
       
        // 3896 , HARDWARE_FIREWALL_HIGH_AVAILABILITY , Hardware Firewall (High Availability)
        // 297 , 1000MBPS_HARDWARE_FIREWALL , 1000Mbps Hardware Firewall
        // 298 , 100MBPS_HARDWARE_FIREWALL , 100Mbps Hardware Firewall
        // 1296 , 2000MBPS_HARDWARE_FIREWALL , 2000Mbps Hardware Firewall
        // 4550 , 20MBPS_HARDWARE_FIREWALL , 20Mbps Hardware Firewall
        // 299 , 10MBPS_HARDWARE_FIREWALL , 10Mbps Hardware Firewall
        // 1329 , HARDWARE_FIREWALL_DEDICATED , Hardware Firewall (Dedicated)
        // 4551 , 200MBPS_HARDWARE_FIREWALL , 200Mbps Hardware Firewall
        // $example-&amp;gt;getPackageById(0, 297 );
        // Generic Location Price
        // (
        //  [id] =&amp;gt; 408
        //  [itemId] =&amp;gt; 297
        //  [locationGroupId] =&amp;gt;
        //  [oneTimeFee] =&amp;gt; 0
        //  [recurringFee] =&amp;gt; 199
        //  [setupFee] =&amp;gt; 0
        // )
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 408;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();

        // Put your serverId here
        $serverToFirewall = new stdClass();
        $serverToFirewall-&amp;gt;id = 12345;
        $container-&amp;gt;hardware[0] = $serverToFirewall;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }


    function placeOrderFortigateAppliance() {
        // The speed of the firewall needs to match speed of the server
        // $example-&amp;gt;getPackageById(0, 4337 );
        // 4337 , FORTIGATE_SECURITY_APPLIANCE , FortiGate Security Appliance
        // 4338 , FORTIGATE_SECURITY_APPLIANCE_HIGH_AVAILABILITY , FortiGate Security Appliance (High Availability)
        // Generic Location Price
        // [id] =&amp;gt; 21514
        // [itemId] =&amp;gt; 4337
        // [locationGroupId] =&amp;gt;
        // [recurringFee] =&amp;gt; 999
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 21514;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();
        // Put the vlan id that you want to protect here
        $container-&amp;gt;vlanId = 12345;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

}


$example = new Example();
// $example-&amp;gt;getAllPackages();
// $example-&amp;gt;getPackageById(0, 297 );
// $example-&amp;gt;placeOrderHardwareFirewall();
// $example-&amp;gt;getPackageById(0, 4337 );
// $example-&amp;gt;placeOrderFortigateAppliance();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>/php/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderSSLCert/</guid>
      <description>

&lt;h4 id=&#34;generating-a-csr:a798909b54a41db7cd3faf021a46bea5&#34;&gt;Generating a CSR&lt;/h4&gt;

&lt;p&gt;You will need a csr to make this request, it should be on your local file system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genrsa -out domain.key 2048
openssl req -new -sha256 -key domain.key -out domain.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    /*
    * Package 0 is the &amp;quot;Everything else&amp;quot; pacakge, which contains SSL certain. But if you didn&#39;t remember that
    * this function will get you that information
    */
    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }

    /*
    * Each package has a lot of items, so this function will show you all of those along with their prices. 
    * Search through it for the proper SSL item you want to order, and take note of its price
    */
    function getPackageById($id=0, $onlyShow=0) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                print_r($item-&amp;gt;prices); 
            }
        }
    }


    /*
    * Change verifyOrder to placeOrder when you are actually ready to make a certificate 
    */
    function placeOrder($csrFilename=&#39;./domain.csr&#39;) {

        $csr = file_get_contents($csrFilename);
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $addressInfo = new stdClass();
        $addressInfo-&amp;gt;address = new stdClass();
        $addressInfo-&amp;gt;address-&amp;gt;addressLine1 = &amp;quot;1234 fleet street&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;city = &amp;quot;Houston&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;countryCode = &amp;quot;US&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;postalCode =  &amp;quot;77002&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;state = &amp;quot;TX&amp;quot;;
        $addressInfo-&amp;gt;emailAddress =&amp;quot;chgallo@lablayer.info&amp;quot;;
        $addressInfo-&amp;gt;firstName = &amp;quot;Christopher&amp;quot;;
        $addressInfo-&amp;gt;lastName = &amp;quot;Gallo&amp;quot;;
        $addressInfo-&amp;gt;organizationName = &amp;quot;SoftLayer&amp;quot;;
        $addressInfo-&amp;gt;phoneNumber = &amp;quot;281-123-4567&amp;quot;;
        $addressInfo-&amp;gt;title = &amp;quot;Dev&amp;quot;; 

        $price = new stdClass();
        $price-&amp;gt;id = 1836;

        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Security_Certificate&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;serverCount = 1;
        $container-&amp;gt;serverType = &#39;apacheapachessl&#39;;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;certificateSigningRequest = $csr;

        $container-&amp;gt;technicalContact = $addressInfo;
        $container-&amp;gt;administrativeContact = $addressInfo;
        $container-&amp;gt;organizationInformation = $addressInfo;
        $container-&amp;gt;billingContact = $addressInfo;
        # Needs to be a VERY specific email @ the domain you are registering
        # admin / administrator / hostmaster / root / webmaster / mailmaster
        $container-&amp;gt;orderApproverEmailAddress = &amp;quot;admin@lablayer.info&amp;quot;;  

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        // print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

    /*
    * This info is required for the serverType property. 
    */
    function getServerTypes() {
        // http://sldn.softlayer.com/reference/services/SoftLayer_Security_Certificate_Request_ServerType
        $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Security_Certificate_Request_ServerType&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $types = $client-&amp;gt;getAllObjects();
        print_r($types);
    }

}


$example = new Example();
// Figure out which package has the SSL certs
$example-&amp;gt;getAllPackages();

// Package 0, item 964 is the ssl cert we want to see the prices for.
$example-&amp;gt;getPackageById(0, 964 );

// 964 , SSL_CERTIFICATE_RAPIDSSL_1_YEAR , RapidSSL - 1 year
// [id] =&amp;gt; 1836
// [setupFee] =&amp;gt; 19

$example-&amp;gt;getServerTypes();
/*
[1] =&amp;gt; stdClass Object
    (
        [description] =&amp;gt; Apache + ApacheSSL
        [id] =&amp;gt; 2
        [name] =&amp;gt; apacheapachessl
        [value] =&amp;gt; 22
    )
*/
$example-&amp;gt;placeOrder();    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>/python/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/orderSSLCert/</guid>
      <description>

&lt;h4 id=&#34;generating-a-csr:a798909b54a41db7cd3faf021a46bea5&#34;&gt;Generating a CSR&lt;/h4&gt;

&lt;p&gt;You will need a csr to make this request, it should be on your local file system.&lt;/p&gt;

&lt;p&gt;The contents of the CSR &lt;em&gt;MATTER&lt;/em&gt;, they need to match the information for what you are ordering.
+ orderApproverEmailAddress must match the Email Address of the CSR
+ The CSR Common name must be set and must be a part of the orderApproverEmailAddress&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ openssl genrsa -out domain.key 2048
$ openssl req -new -sha256 -key domain.key -out domain.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:TX
Locality Name (eg, city) []:Houston
Organization Name (eg, company) [Internet Widgits Pty Ltd]:SoftLayer
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:lablayer.info
Email Address []:admin@lablayer.info

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

$
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
import pprint
import logging

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        pp = pprint.PrettyPrinter(indent=4)
        filename = &#39;./domain.csr&#39;

        cert = self.file_get_contents(filename)
        addressInfo =  {
                    &amp;quot;addressLine1&amp;quot; : &amp;quot;1234 fleet street&amp;quot;,
                    &amp;quot;city&amp;quot; : &amp;quot;Houston&amp;quot;,
                    &amp;quot;countryCode&amp;quot; : &amp;quot;US&amp;quot;,
                    &amp;quot;postalCode&amp;quot; : &amp;quot;77090&amp;quot;,
                    &amp;quot;state&amp;quot; : &amp;quot;TX&amp;quot;
                }
        contactInfo = {
                &amp;quot;address&amp;quot;: addressInfo,
                &amp;quot;emailAddress&amp;quot;: &amp;quot;chgallo@lablayer.info&amp;quot;,
                &amp;quot;firstName&amp;quot;: &amp;quot;Christopher&amp;quot;,
                &amp;quot;lastName&amp;quot;: &amp;quot;Gallo&amp;quot;,
                &amp;quot;organizationName&amp;quot;: &amp;quot;SoftLayer&amp;quot;,
                &amp;quot;phoneNumber&amp;quot;: &amp;quot;281-123-4567&amp;quot;,
                &amp;quot;title&amp;quot;: &amp;quot;Dev&amp;quot;
            }
        sslContainer= {&#39;orderContainers&#39;: [
        {
            &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Security_Certificate&amp;quot;,
            &amp;quot;packageId&amp;quot;:0,
            &amp;quot;quantity&amp;quot;:1,
            &amp;quot;serverCount&amp;quot;:1,
            &amp;quot;certificateSigningRequest&amp;quot;: cert,
            &amp;quot;serverType&amp;quot;: &amp;quot;apacheopenssl&amp;quot;,
            # Needs to be a VERY specific email @ the domain you are registering
            # admin / administrator / hostmaster / root / webmaster / mailmaster
            &amp;quot;orderApproverEmailAddress&amp;quot;: &amp;quot;admin@lablayer.info&amp;quot;,
            &amp;quot;technicalContact&amp;quot;: contactInfo,
            &amp;quot;administrativeContact&amp;quot;: contactInfo,
            &amp;quot;billingContact&amp;quot;: contactInfo,
            &amp;quot;organizationInformation&amp;quot;: {
                &amp;quot;address&amp;quot; :addressInfo,
                &amp;quot;organizationName&amp;quot; : &amp;quot;SoftLayer&amp;quot;,
                &amp;quot;phoneNumber&amp;quot;: &amp;quot;281-123-4567&amp;quot;
            },
            &amp;quot;prices&amp;quot;: [
                #SSL_CERTIFICATE_RAPIDSSL_1_YEAR
                {&#39;id&#39;:1836}
            ]
        }
        ]
        }

        pp.pprint(sslContainer)

        result = self.client[&#39;SoftLayer_Product_Order&#39;].verifyOrder(sslContainer)
        pp.pprint(result)

    def file_get_contents(self,filename):
        with open(filename) as f:
            return f.read()

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ordering with placeOrder</title>
      <link>/rest/place_order/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/place_order/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder/&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder`&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -u userid:api_key -X POST --data @create.json 
https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;parameters&amp;quot; : [
        {
            &amp;quot;packageId&amp;quot; : 126,
            &amp;quot;location&amp;quot; :449494,
            &amp;quot;quantity&amp;quot; : 1,
            &amp;quot;hardware&amp;quot;: [{
                &amp;quot;hostname&amp;quot;: &amp;quot;TEST&amp;quot;,
                &amp;quot;domain&amp;quot;: &amp;quot;test1&amp;quot;
            }],
            &amp;quot;prices&amp;quot;: [
                {&amp;quot;id&amp;quot;: 13739},
                {&amp;quot;id&amp;quot;: 13748},
                {&amp;quot;id&amp;quot;: 1267},
                {&amp;quot;id&amp;quot;: 342},
                {&amp;quot;id&amp;quot;: 21141},
                {&amp;quot;id&amp;quot;: 58},
                {&amp;quot;id&amp;quot;: 876},
                {&amp;quot;id&amp;quot;: 57},
                {&amp;quot;id&amp;quot;: 55},
                {&amp;quot;id&amp;quot;: 21},
                {&amp;quot;id&amp;quot;: 906},
                {&amp;quot;id&amp;quot;: 420},
                {&amp;quot;id&amp;quot;: 418},
                {&amp;quot;id&amp;quot;: 37620}
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-price-ids-explained:7de9bdc6547136ff8b5f9c219df2c891&#34;&gt;The Price Ids Explained&lt;/h4&gt;

&lt;p&gt;Use &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItemPrices&#34;&gt;getItemPrices&lt;/a&gt; to find the IDs and Items you need&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Single Processor Quad Core Xeon 1270 - 3.40GHz (Sandy Bridge) - 1 x 8MB cache w/HT&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 13739},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;32 GB DDR3 1333&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 13748},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1TB sataII&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 1267},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2000 GB Bandwidth&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 342},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1 Gbps Dual public uplink&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 21141},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;automated notification response&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 58},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Non-Raid Disk Controller&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 876},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;email and ticket notification&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 57},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;host ping monitoring&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 55},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;single primary ip&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 21},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;remote managements&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 906},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;vpn management&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 420},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;vulnerability&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 418},&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ubuntu 14.04 64bit&lt;/td&gt;
&lt;td&gt;{&amp;lsquo;id&amp;rsquo;: 37620}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;bigDataOrderFlag&amp;quot;: false,
    &amp;quot;billingOrderItemId&amp;quot;: null,
    &amp;quot;containerSplHash&amp;quot;: &amp;quot;000000004f26de1000007f7b4154b39b&amp;quot;,
    &amp;quot;currencyShortName&amp;quot;: &amp;quot;USD&amp;quot;,
    &amp;quot;extendedHardwareTesting&amp;quot;: null,
    &amp;quot;hardware&amp;quot;: [
        {
            &amp;quot;accountId&amp;quot;: null,
            &amp;quot;bareMetalInstanceFlag&amp;quot;: null,
            &amp;quot;domain&amp;quot;: &amp;quot;test1&amp;quot;,
            &amp;quot;hardwareStatusId&amp;quot;: null,
            &amp;quot;hostname&amp;quot;: &amp;quot;TEST&amp;quot;,
            &amp;quot;primaryBackendNetworkComponent&amp;quot;: {
                &amp;quot;networkVlanId&amp;quot;: null
            },
            &amp;quot;primaryNetworkComponent&amp;quot;: {
                &amp;quot;networkVlanId&amp;quot;: null
            }
        }
    ],
    &amp;quot;imageTemplateId&amp;quot;: null,
    &amp;quot;isManagedOrder&amp;quot;: 0,
    &amp;quot;location&amp;quot;: &amp;quot;449494&amp;quot;,
    &amp;quot;locationObject&amp;quot;: {
        &amp;quot;id&amp;quot;: 449494,
        &amp;quot;longName&amp;quot;: &amp;quot;Dallas 9&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;dal09&amp;quot;
    },
    &amp;quot;message&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;monitoringAgentConfigurationTemplateGroupId&amp;quot;: null,
    &amp;quot;packageId&amp;quot;: 126,
    &amp;quot;paymentType&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;postTaxRecurring&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;postTaxRecurringHourly&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;postTaxRecurringMonthly&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;postTaxSetup&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;preTaxRecurring&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;preTaxRecurringHourly&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;preTaxRecurringMonthly&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;preTaxSetup&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;presetId&amp;quot;: null,
    &amp;quot;prices&amp;quot;: [
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;server&amp;quot;,
                    &amp;quot;id&amp;quot;: 1,
                    &amp;quot;name&amp;quot;: &amp;quot;Server&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 13739,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;3.4&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;Single Intel Xeon E3-1270 (4 Cores, 3.40 GHz)&amp;quot;,
                &amp;quot;id&amp;quot;: 3796,
                &amp;quot;keyName&amp;quot;: &amp;quot;INTEL_SINGLE_XEON_1270_3_40_2&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;GHz&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 3796,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;ram&amp;quot;,
                    &amp;quot;id&amp;quot;: 3,
                    &amp;quot;name&amp;quot;: &amp;quot;RAM&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 13748,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;32&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;32 GB DDR3 1333&amp;quot;,
                &amp;quot;id&amp;quot;: 3805,
                &amp;quot;keyName&amp;quot;: &amp;quot;RAM_32_GB_DDR3_1333_NON_REG&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;GB&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 3805,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;disk0&amp;quot;,
                    &amp;quot;id&amp;quot;: 4,
                    &amp;quot;name&amp;quot;: &amp;quot;First Hard Drive&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 1267,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;500&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;500 GB SATA &amp;quot;,
                &amp;quot;id&amp;quot;: 14,
                &amp;quot;keyName&amp;quot;: &amp;quot;HARD_DRIVE_500GB_SATA_II&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;GB&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 14,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;bandwidth&amp;quot;,
                    &amp;quot;id&amp;quot;: 10,
                    &amp;quot;name&amp;quot;: &amp;quot;Public Bandwidth&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 342,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;20000&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;20000 GB Bandwidth&amp;quot;,
                &amp;quot;id&amp;quot;: 249,
                &amp;quot;keyName&amp;quot;: &amp;quot;BANDWIDTH_20000_GB&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;GB&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 249,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;port_speed&amp;quot;,
                    &amp;quot;id&amp;quot;: 26,
                    &amp;quot;name&amp;quot;: &amp;quot;Uplink Port Speeds&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 21141,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [
                    {
                        &amp;quot;bundleItem&amp;quot;: {
                            &amp;quot;capacity&amp;quot;: &amp;quot;1000&amp;quot;,
                            &amp;quot;description&amp;quot;: &amp;quot;1 Gbps Dual Public &amp;amp; Private Network Uplinks (Unbonded)&amp;quot;,
                            &amp;quot;id&amp;quot;: 4263,
                            &amp;quot;keyName&amp;quot;: &amp;quot;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&amp;quot;,
                            &amp;quot;units&amp;quot;: &amp;quot;Mbps&amp;quot;
                        },
                        &amp;quot;bundleItemId&amp;quot;: 4263,
                        &amp;quot;category&amp;quot;: {
                            &amp;quot;categoryCode&amp;quot;: &amp;quot;service_port&amp;quot;,
                            &amp;quot;id&amp;quot;: 9,
                            &amp;quot;name&amp;quot;: &amp;quot;Private Network Port&amp;quot;
                        },
                        &amp;quot;id&amp;quot;: 5544,
                        &amp;quot;itemPrice&amp;quot;: {
                            &amp;quot;id&amp;quot;: 22235,
                            &amp;quot;itemId&amp;quot;: 4399,
                            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
                        },
                        &amp;quot;itemPriceId&amp;quot;: 22235
                    },
                    {
                        &amp;quot;bundleItem&amp;quot;: {
                            &amp;quot;capacity&amp;quot;: &amp;quot;1000&amp;quot;,
                            &amp;quot;description&amp;quot;: &amp;quot;1 Gbps Dual Public &amp;amp; Private Network Uplinks (Unbonded)&amp;quot;,
                            &amp;quot;id&amp;quot;: 4263,
                            &amp;quot;keyName&amp;quot;: &amp;quot;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&amp;quot;,
                            &amp;quot;units&amp;quot;: &amp;quot;Mbps&amp;quot;
                        },
                        &amp;quot;bundleItemId&amp;quot;: 4263,
                        &amp;quot;category&amp;quot;: {
                            &amp;quot;categoryCode&amp;quot;: &amp;quot;public_port&amp;quot;,
                            &amp;quot;id&amp;quot;: 8,
                            &amp;quot;name&amp;quot;: &amp;quot;Public Network Port&amp;quot;
                        },
                        &amp;quot;id&amp;quot;: 6400,
                        &amp;quot;itemPrice&amp;quot;: {
                            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;id&amp;quot;: 22233,
                            &amp;quot;itemId&amp;quot;: 4400,
                            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
                            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
                        },
                        &amp;quot;itemPriceId&amp;quot;: 22233
                    }
                ],
                &amp;quot;capacity&amp;quot;: &amp;quot;1000&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;1 Gbps Dual Public &amp;amp; Private Network Uplinks (Unbonded)&amp;quot;,
                &amp;quot;id&amp;quot;: 4263,
                &amp;quot;keyName&amp;quot;: &amp;quot;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;Mbps&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 4263,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;response&amp;quot;,
                    &amp;quot;id&amp;quot;: 22,
                    &amp;quot;name&amp;quot;: &amp;quot;Response&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 58,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Automated Notification&amp;quot;,
                &amp;quot;id&amp;quot;: 52,
                &amp;quot;keyName&amp;quot;: &amp;quot;AUTOMATED_NOTIFICATION&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 52,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;disk_controller&amp;quot;,
                    &amp;quot;id&amp;quot;: 11,
                    &amp;quot;name&amp;quot;: &amp;quot;Disk Controller&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 876,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Non-RAID&amp;quot;,
                &amp;quot;id&amp;quot;: 487,
                &amp;quot;keyName&amp;quot;: &amp;quot;DISK_CONTROLLER_NONRAID&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 487,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;notification&amp;quot;,
                    &amp;quot;id&amp;quot;: 21,
                    &amp;quot;name&amp;quot;: &amp;quot;Notification&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 57,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Email and Ticket&amp;quot;,
                &amp;quot;id&amp;quot;: 51,
                &amp;quot;keyName&amp;quot;: &amp;quot;NOTIFICATION_EMAIL_AND_TICKET&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 51,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;monitoring&amp;quot;,
                    &amp;quot;id&amp;quot;: 20,
                    &amp;quot;name&amp;quot;: &amp;quot;Monitoring&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 55,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Host Ping&amp;quot;,
                &amp;quot;id&amp;quot;: 49,
                &amp;quot;keyName&amp;quot;: &amp;quot;MONITORING_HOST_PING&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 49,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;pri_ip_addresses&amp;quot;,
                    &amp;quot;id&amp;quot;: 13,
                    &amp;quot;name&amp;quot;: &amp;quot;Primary IP Addresses&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 21,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;1&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;1 IP Address&amp;quot;,
                &amp;quot;id&amp;quot;: 15,
                &amp;quot;keyName&amp;quot;: &amp;quot;1_IP_ADDRESS&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 15,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;remote_management&amp;quot;,
                    &amp;quot;id&amp;quot;: 46,
                    &amp;quot;name&amp;quot;: &amp;quot;Remote Management&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 906,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Reboot / KVM over IP&amp;quot;,
                &amp;quot;id&amp;quot;: 504,
                &amp;quot;keyName&amp;quot;: &amp;quot;REBOOT_KVM_OVER_IP&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 504,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;vpn_management&amp;quot;,
                    &amp;quot;id&amp;quot;: 31,
                    &amp;quot;name&amp;quot;: &amp;quot;VPN Management - Private Network&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 420,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account&amp;quot;,
                &amp;quot;id&amp;quot;: 309,
                &amp;quot;keyName&amp;quot;: &amp;quot;UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 309,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;vulnerability_scanner&amp;quot;,
                    &amp;quot;id&amp;quot;: 32,
                    &amp;quot;name&amp;quot;: &amp;quot;Vulnerability Assessments &amp;amp; Management&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 418,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;description&amp;quot;: &amp;quot;Nessus Vulnerability Assessment &amp;amp; Reporting&amp;quot;,
                &amp;quot;id&amp;quot;: 307,
                &amp;quot;keyName&amp;quot;: &amp;quot;NESSUS_VULNERABILITY_ASSESSMENT_REPORTING&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 307,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        },
        {
            &amp;quot;categories&amp;quot;: [
                {
                    &amp;quot;categoryCode&amp;quot;: &amp;quot;os&amp;quot;,
                    &amp;quot;id&amp;quot;: 12,
                    &amp;quot;name&amp;quot;: &amp;quot;Operating System&amp;quot;
                }
            ],
            &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;id&amp;quot;: 37620,
            &amp;quot;item&amp;quot;: {
                &amp;quot;bundle&amp;quot;: [],
                &amp;quot;capacity&amp;quot;: &amp;quot;0&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;Ubuntu Linux 14.04 LTS Trusty Tahr - Minimal Install (64 bit)&amp;quot;,
                &amp;quot;id&amp;quot;: 4710,
                &amp;quot;keyName&amp;quot;: &amp;quot;OS_UBUNTU_14_04_LTS_TRUSTY_TAHR_MINIMAL_64_BIT_2&amp;quot;,
                &amp;quot;units&amp;quot;: &amp;quot;N/A&amp;quot;
            },
            &amp;quot;itemId&amp;quot;: 4710,
            &amp;quot;laborFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;oneTimeFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;recurringFee&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;setupFee&amp;quot;: &amp;quot;0&amp;quot;
        }
    ],
    &amp;quot;primaryDiskPartitionId&amp;quot;: 1,
    &amp;quot;privateCloudOrderFlag&amp;quot;: false,
    &amp;quot;proratedInitialCharge&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;proratedOrderTotal&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;quantity&amp;quot;: 1,
    &amp;quot;resourceGroupId&amp;quot;: null,
    &amp;quot;resourceGroupTemplateId&amp;quot;: null,
    &amp;quot;sendQuoteEmailFlag&amp;quot;: null,
    &amp;quot;serverCoreCount&amp;quot;: 4,
    &amp;quot;sourceVirtualGuestId&amp;quot;: null,
    &amp;quot;stepId&amp;quot;: null,
    &amp;quot;taxCacheHash&amp;quot;: &amp;quot;fa1c610dbd007f2b0fda6c417252d748bc093080&amp;quot;,
    &amp;quot;taxCompletedFlag&amp;quot;: true,
    &amp;quot;totalRecurringTax&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;totalSetupTax&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;useHourlyPricing&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a vyatta server with placeOrder</title>
      <link>/php/order_vyatta/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/order_vyatta/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUser, $key);
$template = new stdClass();
$template_extra = new stdClass();
$template-&amp;gt;packageId = 174;
$template-&amp;gt;location  = 224092;
$template-&amp;gt;quantity  = 1;
$template_extra-&amp;gt;os = 21;  //vyatta
$template_extra-&amp;gt;hostname = &#39;foo-vga-small&#39;;
$template_extra-&amp;gt;domain = &#39;softlayer-singapore-test.com&#39;;

//These might be invalid now, please double check on ordering
$template_extra-&amp;gt;price_id = array(13739, // Single Quad Xeon 1270 3.4G 8M
                                   21010, // 4G
                                   878, // Raid
                                   //31693, // Raid 1
                                   1267, // 500G
                                   274, // 1GbE
                                   342, // 20T
                                   // 21, // 1IP
                                   56, // Ping/TCP Mon
                                   57, // Notification
                                   );

$my_template = new stdClass();

 for ($cnt = 0; $cnt &amp;lt; $template-&amp;gt;quantity; $cnt++) {
    $domain = new stdClass();
    $domain-&amp;gt;hostname = &amp;quot;$template_extra-&amp;gt;hostname-$cnt&amp;quot;;
    $domain-&amp;gt;domain = $template_extra-&amp;gt;domain;
    $template-&amp;gt;hardware[] = $domain;
  }
if (empty($template-&amp;gt;imageTemplateGlobalIdentifier))
{
    $template_extra-&amp;gt;price_id[] = $template_extra-&amp;gt;os;
}

foreach ($template_extra-&amp;gt;price_id as $id) {
    $price = new stdClass();
    $price-&amp;gt;id = $id;
    $template-&amp;gt;prices[] = $price;
}
$my_template-&amp;gt;orderContainers = array();
$my_template-&amp;gt;orderContainers[0]-&amp;gt;prices = $template-&amp;gt;prices;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;hardware = $template-&amp;gt;hardware;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;quantity = $template-&amp;gt;quantity;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;location = $template-&amp;gt;location;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;packageId = $template-&amp;gt;packageId;

print_r($my_template);
$result = $client-&amp;gt;verifyOrder($my_template);
print_r($result);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>