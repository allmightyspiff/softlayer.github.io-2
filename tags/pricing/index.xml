<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Pricing on SoftLayer API Examples </title>
    <link>/tags/pricing/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Thu, 01 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getLocationPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new
object_filter.set_criteria_for_key_path(&#39;items.prices.locationGroupId&#39;,
	&#39;operation&#39; =&amp;gt; &#39;in&#39;,
        &#39;options&#39; =&amp;gt; [{
        &#39;name&#39; =&amp;gt; &#39;data&#39;,
        &#39;value&#39; =&amp;gt; 1441195
        }])


location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/ruby/getStandardPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getStandardPricing/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new do |object_filter|
  object_filter.accept(&#39;items.prices.locationGroupId&#39;).when_it is_null
end

location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/php/getStandardPricing/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/getStandardPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$packageId = 194;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey);
  $filter = new stdClass();
  $filter-&amp;gt;items = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId-&amp;gt;operation = &#39;is null&#39;;
  $client-&amp;gt;setObjectFilter($filter);

  $standardPricing = $client-&amp;gt;getItems();
  print_r($standardPricing);
}  catch (\Exception $e) {
    die(&#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/location_based_pricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in â€”or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

package_id = 194
datacenter = &#39;dal06&#39;

client = SoftLayer.Client()

location_object_filter = {
    &#39;name&#39;: {&#39;operation&#39;: datacenter}
}

location_object_mask = &amp;quot;priceGroups&amp;quot;

location = client[&amp;quot;SoftLayer_Location_Datacenter&amp;quot;].getDatacenters(filter=location_object_filter, mask=location_object_mask)

if len(location) == 0:
    # error handling
    exit()

# lookup location group ids
location_group_ids = []
for location_group in location[0][&amp;quot;priceGroups&amp;quot;]:
    location_group_ids.append(location_group[&amp;quot;id&amp;quot;])

object_filter_standard = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
}

standard_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_standard)

object_filter_location = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;in&amp;quot;,
                &amp;quot;options&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;data&amp;quot;,
                        &amp;quot;value&amp;quot;: location_group_ids
                    }
                ]
            }
        }
    }
}

location_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_location)

# let&#39;s key by item id
items = {}

for standard_item in standard_items:
    for location_item in location_items:
        if location_item[&amp;quot;id&amp;quot;] == standard_item[&amp;quot;id&amp;quot;]:
            items[location_item[&amp;quot;id&amp;quot;]] = location_item
            break

    if standard_item[&amp;quot;id&amp;quot;] not in items:
        items[standard_item[&amp;quot;id&amp;quot;]] = standard_item


print(json.dumps(items, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/python/standard_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/standard_pricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

object_filter = {
    &#39;items&#39;: {
        &#39;prices&#39;: {
            &#39;locationGroupId&#39;: {
                &#39;operation&#39;: &#39;is null&#39;
            }
        }
    }
}

client = SoftLayer.Client()
items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=194, filter=object_filter)

print(json.dumps(items, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>