<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Permissions on SoftLayer API Examples </title>
    <link>/tags/permissions/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 01 Mar 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Manage Users</title>
      <link>/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/manageUsers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>/ruby/set_permission/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
user_service = client[&#39;User_Customer&#39;]

# List the user permissions
USER_ID = 172536 # Change me. User id of user to inspect.
pp user_service.object_with_id(USER_ID).getPermissions

# add permission
new_permission = { keyName: &#39;TICKET_ADD&#39; }
result = user_service.object_with_id(USER_ID).addPortalPermission(new_permission)
unless result
  puts &#39;Failed to add permission&#39;
  exit 1
end

# list user permissions again
pp user_service.object_with_id(USER_ID).getPermissions
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>/python/set_permission/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class setPermissions():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, user_id):
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== OLD PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)
        setperm = {&#39;keyName&#39;: &amp;quot;TICKET_ADD&amp;quot;}
        self.client[&#39;User_Customer&#39;].addPortalPermission(setperm, id=user_id)
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== NEW PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)

    def getUsers(self):
        users = self.client[&#39;Account&#39;].getUsers()
        print(&amp;quot;ID - USERNAME - E-MAIL&amp;quot;)
        for user in users:
            print(&amp;quot;%s - %s - %s &amp;quot; % (user[&#39;id&#39;], user[&#39;username&#39;], user[&#39;email&#39;]))

    def printPermissions(sefl, permissions):
        for permission in permissions:
            print(&amp;quot;%s&amp;quot; % permission[&#39;keyName&#39;])

if __name__ == &amp;quot;__main__&amp;quot;:
    main = setPermissions()
    # CHANGE ME
    my_user = 439723
    main.getUsers()
    main.main(my_user)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>