<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Categories on SoftLayer API Examples </title>
    <link>/tags/categories/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 12 Oct 2015 00:00:00 UTC</updated>
    
    <item>
      <title>List Packages</title>
      <link>/ruby/list_packages/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Helper function to fetch through all results from SoftLayer api
# using small page sizes and sleeping before every new page fetch.
def fetch_all(service, method)
  records = []; offset = 0; limit = 10
  loop do
    results = service.result_limit(offset, limit).send(method)
    records += results
    break if results.size &amp;lt; limit
    offset += limit
    sleep 3
  end
  records
end

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
package_service = client[&#39;Product_Package&#39;]

# Show all packages
mask = &#39;mask[id,name,description,itemPrices]&#39;
all_packages = fetch_all(package_service.object_mask(mask), :getAllObjects)

all_packages.each do |package|
  puts &amp;quot;#{package[&#39;id&#39;]} - #{package[&#39;name&#39;]}&amp;quot;
  package[&#39;itemPrices&#39;].each do |price|
    puts &amp;quot;#{price[&#39;id&#39;]} - #{price[&#39;item&#39;][&#39;description&#39;]}&amp;quot;
  end
end

PACKAGE_ID = 126
mask = &#39;mask[id,name,description,items[id,description,keyName,prices[id,locationGroupId]]]&#39;
product_package = package_service.object_mask(mask).object_with_id(PACKAGE_ID).getObject

# Get locations in which package is available
puts &#39;PACKAGE LOCATIONS&#39;
pp package_service.object_with_id(PACKAGE_ID).getLocations

# Show a specific product&#39;s items with prices
product_package[&#39;items&#39;].each do |item|
  puts &amp;quot;#{item[&#39;id&#39;]} - #{item[&#39;description&#39;]} - #{item[&#39;keyName&#39;]}&amp;quot;
  item[&#39;prices&#39;].each do |price|
    puts &amp;quot;\t#{price[&#39;id&#39;]} - locationGroupId: #{price[&#39;locationGroupId&#39;]}&amp;quot;
  end
end

# Will only get the server items for this package
# puts &#39;SERVER ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveServerItems

# Will only get the RAM items for the package
# puts &#39;RAM ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveRamItems

# Get all locations
mask = &#39;mask[id,locations[id,name]]&#39;
puts &#39;ALL LOCATIONS&#39;
pp client[&#39;Location_Group_Pricing&#39;].object_mask(mask).getAllObjects
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>/python/list_packages/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
      
    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Gets ALL packages, and prints their name and price descriptions
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hourlyBillingAvailableFlag]&amp;quot;
        result = self.client[&#39;Product_Package&#39;].getAllObjects();
        for product in result:
            print str(product[&#39;id&#39;]) + &amp;quot; - &amp;quot; + product[&#39;name&#39;]
        # result has a LOT of stuff in it, only print it out if you are ready
        # pp.pprint(result)

    def getPackage(self, package_id=0):
        &amp;quot;&amp;quot;&amp;quot;
        Gets a specific package and prints out some useful information
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices]]&amp;quot;

        # Not all packages are available in all locations, you can check that with getLocations()
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        # pp(locations)

        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        for item in result[&#39;items&#39;]:
            print str(item[&#39;id&#39;]) + &amp;quot; - &amp;quot; + item[&#39;description&#39;] + &amp;quot; --- &amp;quot; + item[&#39;keyName&#39;]
            for prices in item[&#39;prices&#39;]:
                print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;]) + &amp;quot; - locationGroupId: &amp;quot; + str(prices[&#39;locationGroupId&#39;]) 

        # Will only get the server items for this package
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        # print &amp;quot;SERVER ITEMS&amp;quot;
        # pp(serverItems)

        # Will only get the RAM items for the package
        # ramItems = self.client[&#39;Product_Package&#39;].getActiveRamItems(id=package_id)
        # print &amp;quot;RAM ITEMS&amp;quot;
        # pp(ramItems)

     
    
    def getAllLocations(self):
        mask = &amp;quot;mask[id,locations[id,name]]&amp;quot;
        result = self.client[&#39;SoftLayer_Location_Group_Pricing&#39;].getAllObjects(mask=mask);
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
    main.getPackage(126)
    main.getAllLocations()  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Required price IDs for package</title>
      <link>/php/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_required_price_id/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* follow the installation instructions to get SoftLayer API PHP Client working: https://github.com/softlayer/softlayer-api-php-client#installation */
require_once __DIR__.&#39;/vendor/autoload.php&#39;;

use SoftLayer\Common\ObjectMask;
use SoftLayer\SoapClient;

/**
 * Set your SoftLayer API username and key.
 */
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$packageId = 46;


$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey);
try {
    $mask = new SoftLayer\Common\ObjectMask();
    $mask-&amp;gt;configuration-&amp;gt;itemCategory;
    $client-&amp;gt;setObjectMask($mask);
    $configs = $client-&amp;gt;getConfiguration();
    $requiredCategories = array();

    foreach ($configs as $config) {
        if ($config-&amp;gt;isRequired == 1) {
            $requiredCategories[$config-&amp;gt;itemCategory-&amp;gt;id][&#39;name&#39;] = $config-&amp;gt;itemCategory-&amp;gt;name;
        }
    }
    $categories = array();
    $mask = new SoftLayer\Common\ObjectMask();
    $mask-&amp;gt;itemPrices-&amp;gt;categories;
    $client-&amp;gt;setObjectMask($mask);
    $prices = $client-&amp;gt;getItemPrices();

    foreach ($requiredCategories as $category =&amp;gt; $categoryName) {
        $i = 0;
        foreach ($prices as $price) {
            foreach ($price-&amp;gt;categories as $priceCategory) {
                if ($priceCategory-&amp;gt;id == $category) {
                    $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;id&#39;] = $price-&amp;gt;id;
                    $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;description&#39;] = $price-&amp;gt;item-&amp;gt;description;
                    asort($requiredCategories[$category][&#39;itemPrices&#39;][$i]);
                    asort($requiredCategories);
                    $i++;
                }
            }
        }
    }

    print_r($requiredCategories);
} catch ( Exception $e) {
    die( $e-&amp;gt;getMessage());
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Required price IDs for package</title>
      <link>/python/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/get_required_price_id/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
package = 46

client = SoftLayer.Client()
categoryObjectMask = &amp;quot;mask[isRequired, itemCategory[id, name]]&amp;quot;

configurations = client[&#39;Product_Package&#39;].getConfiguration(
    id=package, mask=categoryObjectMask)

pricesObjectMask = &amp;quot;mask[id;item.description;categories.id]&amp;quot;

prices = client[&#39;Product_Package&#39;].getItemPrices(
    id=package, mask=pricesObjectMask)

headerFormat = &#39;%s - %s:&#39;
priceFormat = &#39;    %s -- %s&#39;
for configuration in configurations:
    if (not configuration[&#39;isRequired&#39;]):
        continue
    print headerFormat % (configuration[&#39;itemCategory&#39;][&#39;name&#39;],
                          configuration[&#39;itemCategory&#39;][&#39;id&#39;])
    for price in prices:
        if (&#39;categories&#39; not in price):
            continue
        if any((category.get(&#39;id&#39;) == configuration[&#39;itemCategory&#39;][&#39;id&#39;]
                for category in price[&#39;categories&#39;])):
            print priceFormat % (price[&#39;id&#39;], price[&#39;item&#39;][&#39;description&#39;])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>