<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_virtual_guest on SoftLayer API Examples </title>
    <link>/classes/softlayer_virtual_guest/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 22 Mar 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>/python/attach_disk/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/attach_disk/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, image_id, guest_id):
        my_image = self.getMyImage(image_id)
        size = my_image.get(&amp;quot;capacity&amp;quot;, 100)
        &amp;quot;&amp;quot;&amp;quot;
        SAN based guests will throw the following exception:
        SoftLayer.exceptions.SoftLayerAPIError: SoftLayerAPIError(SoftLayer_Exception_Public): This guest is SAN-based, and does not require host migration for disk attachment.
        &amp;quot;&amp;quot;&amp;quot;
        available = self.client[&#39;SoftLayer_Virtual_Guest&#39;].checkHostDiskAvailability(size,id=guest_id)
        # This should be True. False means the host doesn&#39;t have enough disk space to attach
        pp(available)

        attach = self.client[&#39;SoftLayer_Virtual_Guest&#39;].attachDiskImage(image_id, id=guest_id)
        print(&amp;quot;Attaching storage&amp;quot;)
        pp(attach)

    def getImages(self):

        mask = &amp;quot;mask[type,blockDevices[guest]]&amp;quot;
        images = self.client[&#39;SoftLayer_Account&#39;].getPortableStorageVolumes(mask=mask)

        for image in images:
            desc = image.get(&#39;description&#39;, &amp;quot;---&amp;quot;)
            capacity = image.get(&#39;capacity&#39;, &amp;quot;0&amp;quot;)
            print(&amp;quot;%s - %s (%s) - %s &amp;quot; % 
                (image[&#39;id&#39;], image[&#39;type&#39;][&#39;keyName&#39;], capacity ,desc)
            )
            for disk in image[&#39;blockDevices&#39;]:
                try:
                    hostname = disk[&#39;guest&#39;][&#39;fullyQualifiedDomainName&#39;]
                except KeyError:
                    hostname = &amp;quot;None&amp;quot;
                print(&amp;quot;\t%s&amp;quot; % hostname)

    def getMyImage(self,imageId):
        mask = &amp;quot;mask[blockDevices[guest],sourceDiskImage,type]&amp;quot;
        image = self.client[&#39;SoftLayer_Virtual_Disk_Image&#39;].getObject(mask=mask,id=imageId)
        pp(image)
        return image


if __name__ == &amp;quot;__main__&amp;quot;:
    image_id = 12345
    guest_id = 67890
    main = example()
    main.getImages()
    main.main(image_id, guest_id)
    # The new guest will only show up on the image once the migration transaction is completed
    main.getMyImage(image_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manage Users</title>
      <link>/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/manageUsers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/python/cancel_service/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/cancel_service/</guid>
      <description>&lt;p&gt;In the following example we are retrieving the Billing Item of a Virtual Guest with the ID of 12345678 and passing that ID to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService&#34;&gt;cancelService&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=12345678)
cancelItem = client[&#39;SoftLayer_Billing_Item&#39;].cancelService(id = billingId[&#39;id&#39;])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>/python/getbillingitem/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/getbillingitem/</guid>
      <description>&lt;p&gt;In the following example we are looking for the Billing Item of an Virtual Guest with an ID of 1234567.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(billingId)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>/python/monthtodate/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]&amp;quot;
toDateCost = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(toDateCost)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;
{&#39;createDate&#39;: &#39;2016-02-05T14:07:37-06:00&#39;,
  &#39;currentHourlyCharge&#39;: &#39;.023&#39;,
  &#39;hourlyRecurringFee&#39;: &#39;.023&#39;,
  &#39;hoursUsed&#39;: &#39;1&#39;}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>/php/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$guest = &#39;1234567&#39;; # Put your VSI ID here

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest, $apiUsername, $apiKey);
$objectMask = new \SoftLayer\Common\ObjectMask();
$objectMask-&amp;gt;createDate;
$objectMask-&amp;gt;hoursUsed;
$objectMask-&amp;gt;hourlyRecurringFee;
$objectMask-&amp;gt;currentHourlyCharge;

$client-&amp;gt;setObjectMask($objectMask);
$response = $client-&amp;gt;getBillingItem();
print_r($response)
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve the month to date cost of an hourly VSI</title>
      <link>/perl/monthtodatecost/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/perl/monthtodatecost/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
use lib &amp;quot;/path/to/softlayer-api-perl-client/&amp;quot;;
use SoftLayer::API::SOAP;
use Data::Dumper;

my $api_username = &amp;quot;x&amp;quot;;
my $api_key = &amp;quot;a&amp;quot;;
my $client = SoftLayer::API::SOAP-&amp;gt;new(&#39;SoftLayer_Account&#39;, undef, $api_username, $api_key);

# SoftLayer_Virtual_Guest/&amp;lt;VSI_ID&amp;gt;/getBillingItem?objectMask=mask\[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge\]&amp;quot;
# CHANGE ME to the id of the virtual guest you want to check
my $virtual_guest_id = 12345678;
my $virtual_guest = SoftLayer::API::SOAP-&amp;gt;new(&#39;SoftLayer_Virtual_Guest&#39;, $virtual_guest_id, $api_username, $api_key);
my $objectMask = {
    &#39;createDate&#39; =&amp;gt; &#39;&#39;,
    &#39;hoursUsed&#39; =&amp;gt; &#39;&#39;,
    &#39;hourlyRecurringFee&#39; =&amp;gt; &#39;&#39;,
    &#39;currentHourlyCharge&#39; =&amp;gt; &#39;&#39;
};

$result = $virtual_guest-&amp;gt;getBillingItem();
my $cost;
$cost = $result-&amp;gt;result-&amp;gt;{&#39;hoursUsed&#39;} * $result-&amp;gt;result-&amp;gt;{&#39;hourlyRecurringFee&#39;};
print $result-&amp;gt;result-&amp;gt;{&#39;hoursUsed&#39;} . &amp;quot; hours @ &amp;quot; . $result-&amp;gt;result-&amp;gt;{&#39;hourlyRecurringFee&#39;} . &amp;quot;\$/hour = &amp;quot; . $cost . &amp;quot; \$\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 hours @ .045$/hour = 0.045 $
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>/rest/hourlycost_date/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/hourlycost_date/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getBillingItem&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getBillingItem()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/&lt;virtual_guest_id&gt;/getBillingItem?objectMask=mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/&amp;lt;virtual_guest_id&amp;gt;/getBillingItem?objectMask=mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;createDate&amp;quot;: &amp;quot;2015-12-30T09:26:32-06:00&amp;quot;,
    &amp;quot;currentHourlyCharge&amp;quot;: &amp;quot;.18&amp;quot;,
    &amp;quot;hourlyRecurringFee&amp;quot;: &amp;quot;.09&amp;quot;,
    &amp;quot;hoursUsed&amp;quot;: &amp;quot;2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel virtual server</title>
      <link>/rest/cancel_virtual_server/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/cancel_virtual_server/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;DELETE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Virtual_Guest/{server_id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user userid:api_key curl -X DELETE
https://api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/123456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create virtual server</title>
      <link>/rest/create_virtual_server/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/create_virtual_server/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Virtual_Guest.json?objectMask=id&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST --data @vs_create.json --user userid:api_key
https://api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest.json?objectMask=mask.id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;parameters&amp;quot; : [
        {
            &amp;quot;hostname&amp;quot; : &amp;quot;myhostname&amp;quot;,
            &amp;quot;domain&amp;quot; : &amp;quot;my.domain.com&amp;quot;,
            &amp;quot;startCpus&amp;quot; : 1,
            &amp;quot;maxMemory&amp;quot; : 1024,
            &amp;quot;datacenter&amp;quot; : {
                &amp;quot;name&amp;quot; : &amp;quot;wdc01&amp;quot;
                },
            &amp;quot;hourlyBillingFlag&amp;quot; : true,
            &amp;quot;localDiskFlag&amp;quot; : true,
            &amp;quot;operatingSystemReferenceCode&amp;quot;: &amp;quot;UBUNTU_LATEST&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;id&amp;quot;:7742740}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get virtual server details</title>
      <link>/rest/get_virtual_server_details/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/rest/get_virtual_server_details/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Virtual_Guest/{server_id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user userid:api_key
&amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/
7743084.json?objectMask=mask[domain,fullyQualifiedDomainName,hostname,id,primaryBack
endIpAddress,primaryIpAddress,status.keyName]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;domain&amp;quot;:&amp;quot;lab01.softlayer.ws&amp;quot;,
    &amp;quot;fullyQualifiedDomainName&amp;quot;:&amp;quot;test03.lab01.softlayer.ws&amp;quot;,
    &amp;quot;hostname&amp;quot;:&amp;quot;test03&amp;quot;,
    &amp;quot;id&amp;quot;:7743084,
    &amp;quot;primaryBackendIpAddress&amp;quot;:&amp;quot;10.118.68.8&amp;quot;,
    &amp;quot;primaryIpAddress&amp;quot;:&amp;quot;168.1.79.8&amp;quot;,
    &amp;quot;status&amp;quot;:{
        &amp;quot;keyName&amp;quot;:&amp;quot;ACTIVE&amp;quot;,
        &amp;quot;name&amp;quot;:&amp;quot;Active&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get primary ip address record</title>
      <link>/php/primary_ip_address_record/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/primary_ip_address_record/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
require_once &#39;./SoftLayer/SoapClient.class.php&#39;;

$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$virtualGuestId = 1111111
$client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,   $virtualGuestId, $apiUsername, $apiKey);


$objectMask = new SoftLayer_ObjectMask();
$objectMask-&amp;gt;primaryNetworkComponent;
$objectMask-&amp;gt;primaryNetworkComponent-&amp;gt;primaryIpAddressRecord;

$client-&amp;gt;setObjectMask($objectMask);
$guest = $client-&amp;gt;getObject();
print_r($guest);



/*
=============== RESULT ===============
~/Code/softlayer-examples/testing/php  $ php getIpID.php
stdClass Object
(
    [accountId] =&amp;gt; 307608
    [createDate] =&amp;gt; 2015-06-12T15:37:58-06:00
    [dedicatedAccountHostOnlyFlag] =&amp;gt;
    [domain] =&amp;gt; test.lablayer.info
    [fullyQualifiedDomainName] =&amp;gt; salttest.test.lablayer.info
    [hostname] =&amp;gt; salttest
    [id] =&amp;gt; 10015277
    [lastPowerStateId] =&amp;gt;
    [lastVerifiedDate] =&amp;gt;
    [maxCpu] =&amp;gt; 1
    [maxCpuUnits] =&amp;gt; CORE
    [maxMemory] =&amp;gt; 1024
    [metricPollDate] =&amp;gt;
    [modifyDate] =&amp;gt; 2015-06-12T16:12:52-06:00
    [provisionDate] =&amp;gt; 2015-06-12T15:42:03-06:00
    [startCpus] =&amp;gt; 1
    [statusId] =&amp;gt; 1001
    [uuid] =&amp;gt; 7a9731a1-4c29-144b-8051-55507ff1f08b
    [globalIdentifier] =&amp;gt; 8f5ed47b-9864-418b-8966-e9d4a70742f8
    [managedResourceFlag] =&amp;gt;
    [primaryBackendIpAddress] =&amp;gt; 10.91.155.168
    [primaryIpAddress] =&amp;gt; 198.23.82.198
    [primaryNetworkComponent] =&amp;gt; stdClass Object
        (
            [createDate] =&amp;gt; 2015-06-12T15:38:26-06:00
            [guestId] =&amp;gt; 10015277
            [id] =&amp;gt; 5277729
            [macAddress] =&amp;gt; 06:51:99:7e:f9:ef
            [maxSpeed] =&amp;gt; 10
            [modifyDate] =&amp;gt; 2015-06-12T15:38:39-06:00
            [name] =&amp;gt; eth
            [networkId] =&amp;gt; 4043239
            [port] =&amp;gt; 1
            [speed] =&amp;gt; 10
            [status] =&amp;gt; ACTIVE
            [uuid] =&amp;gt; 61836774-e776-d480-75e5-bc45b74982c7
            [primaryIpAddress] =&amp;gt; 198.23.82.198
            [primaryIpAddressRecord] =&amp;gt; stdClass Object
                (
                    [id] =&amp;gt; 13751854
                    [ipAddress] =&amp;gt; 198.23.82.198
                    [isBroadcast] =&amp;gt;
                    [isGateway] =&amp;gt;
                    [isNetwork] =&amp;gt;
                    [isReserved] =&amp;gt;
                    [subnetId] =&amp;gt; 469930
                    [guestNetworkComponentBinding] =&amp;gt; stdClass Object
                        (
                            [ipAddressId] =&amp;gt; 13751854
                            [port] =&amp;gt;
                            [type] =&amp;gt; PRIMARY
                        )

                    [subnet] =&amp;gt; stdClass Object
                        (
                            [broadcastAddress] =&amp;gt; 198.23.82.199
                            [cidr] =&amp;gt; 29
                            [gateway] =&amp;gt; 198.23.82.193
                            [id] =&amp;gt; 469930
                            [isCustomerOwned] =&amp;gt;
                            [isCustomerRoutable] =&amp;gt;
                            [modifyDate] =&amp;gt; 2015-04-18T19:15:55-06:00
                            [netmask] =&amp;gt; 255.255.255.248
                            [networkIdentifier] =&amp;gt; 198.23.82.192
                            [networkVlanId] =&amp;gt; 359732
                            [sortOrder] =&amp;gt; 4
                            [subnetType] =&amp;gt; PRIMARY
                            [totalIpAddresses] =&amp;gt; 8
                            [usableIpAddressCount] =&amp;gt; 5
                            [version] =&amp;gt; 4
                        )

                )

        )

    [status] =&amp;gt; stdClass Object
        (
            [keyName] =&amp;gt; ACTIVE
            [name] =&amp;gt; Active
        )

)
*/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>