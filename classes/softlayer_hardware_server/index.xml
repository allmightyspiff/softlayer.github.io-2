<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_hardware_server on SoftLayer API Examples </title>
    <link>/classes/softlayer_hardware_server/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 22 Mar 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Update Firmware on a Bare Metal Server</title>
      <link>/python/update_firmware/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/update_firmware/</guid>
      <description>&lt;p&gt;In the following example we are updating the firmware for the IPMI, BIOS, Hard Drives, and Raid Controller on our Bare Metal Server with ID 12345. We can toggle the specific items we want updated by setting the values to False (Do not update firmware) or True (Do update firmware).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
client = SoftLayer.Client()
mgr = SoftLayer.HardwareManager(client)

result = mgr.update_firmware(hardware_id=12345,ipmi=True,raid_controller=True,bios=True,hard_drive=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/reload_hardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Will reload the operating system with a new imageTemplate, 
        along with a set of sshKeys. This will erease all data.
        &amp;quot;&amp;quot;&amp;quot;
        # Change these IDs
        imageId = 1234567
        sshKey1 = 123
        sshKey2 = 456
        serverId = 102938
        config = {
            &#39;imageTemplateId&#39;: imageId, 
            &#39;sshKeyIds&#39;: [sshKey1, sshKey2]
        }

        output = client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId)

        pp(config)
        print &amp;quot;RESULT\n&amp;quot;
        pp(output)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Server Bandwidth</title>
      <link>/python/get_bandwidth_data/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/get_bandwidth_data/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        pp = pprint.PrettyPrinter(indent=2)
        theMask = &amp;quot;mask[inboundPrivateBandwidthUsage,inboundPublicBandwidthUsage,outboundPrivateBandwidthUsage,outboundPublicBandwidthUsage]&amp;quot;
        result = self.client[&#39;SoftLayer_Account&#39;].getHardware()
        print &amp;quot;server_name,public_in,public_out,private_in,private_out&amp;quot;
        
        for server in result:
            #getHardware() only returns SoftLayer_Hardware, which doesn&#39;t have the private bw usage metrics, for some reason.
            # So we just use SoftLayer_Hardware_Server here, which has more detailed information
            serverInfo = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=theMask)

            # use .get() to avoid exceptions
            pubin = serverInfo.get(&#39;inboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            pubout = serverInfo.get(&#39;outboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            privin =serverInfo.get(&#39;inboundPrivateBandwidthUsage&#39;, &#39;--&#39;)
            privout = serverInfo.get(&#39;outboundPrivateBandwidthUsage&#39;, &#39;--&#39;)

            print(serverInfo[&#39;fullyQualifiedDomainName&#39;] + &amp;quot;,&amp;quot;),
            print(pubin + &amp;quot;,&amp;quot;),
            print(pubout + &amp;quot;,&amp;quot;),
            print(privin + &amp;quot;,&amp;quot;),
            print(privout)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set a server&#39;s metadata</title>
      <link>/python/set_user_metadata/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/set_user_metadata/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

# CHANGE ME
server = 678243 

client = SoftLayer.Client()

mask = &amp;quot;mask[attributes]&amp;quot;

# Sets the metadata for this server to tttttt
result1 = client[&#39;SoftLayer_Hardware_Server&#39;].setUserMetadata({&#39;value&#39;: &#39;tttttt&#39;},id=server)
pp(result1)

result2 = client[&#39;SoftLayer_Hardware_Server&#39;].getObject(mask=mask,id=server)

pp(result2)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve metric data for a single server.</title>
      <link>/php/get_monitoring_metrics/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_monitoring_metrics/</guid>
      <description>&lt;p&gt;We will call the SoftLayer API to retrieve the monitoring agents,
 configuration template, and configuration values for a server instance.
 Then we will demonstrate how to find definitions that you have enabled for
 metric tracking, how to check that they are enabled, and how to then use them
 to get metrics for arbitrary dates.&lt;/p&gt;

&lt;p&gt;Note that the agent, section, sub-section, and definition names have already been
 pre-selected and in order for this example to work your server must have these
 configuration options enabled and be able to retrieve metrics for them through
the portal. If you wish to use additional or substitute names for any of those
shown below you can do so by looking at the current options available in the
 SoftLayer portal or by further debugging the output of this script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$serverId = 17422485;

$startDate = &#39;04/13/2016&#39;;

/**
 * The date at which you wish to end the metric sample.
 *
 * @var string
 */
$endDate = &#39;08/10/2016&#39;;

/**
 * For this example we&#39;ll be working with SoftLayer_Virtual_Guest, you can also work
 * with SoftLayer_Hardware_Server depending on the type of server you&#39;re interacting with.
 *
 * Create a connection to the SoftLayer_Virtual_Guest API service and call the
 * getMonitoringAgents() method to get the server&#39;s associated tracking object record.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $serverId, $apiUsername, $apiKey);

try {
    // getMonitoringAgents() returns an array of SoftLayer_Monitoring_Agent objects.
    // From here you can loop through these agents to perform different functions such as get graphs,
    // activate, deactivate, or run other functions on it.
    $monitoringAgents = $client-&amp;gt;getMonitoringAgents();
} catch (Exception $e) {
    die(&#39;Unable to retrieve server record: &#39; . $e-&amp;gt;getMessage());
}

/**
 * Find the id of the specific agent we are wanting, in this example the &amp;quot;Cpu, Disk, and Memory&amp;quot; monitoring agent.
 */
$cdmAgent = null;
foreach ($monitoringAgents as $agent) {
    if ($agent-&amp;gt;name == &#39;Cpu, Disk, and Memory Monitoring Agent&#39;) {
        $cdmAgent = $agent;
        break;
    }
}

/**
 * Next we can create an array of all configuration variables that we are able to track.
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

// Object mask to get all definitions that we need.
$objectMask = &#39;mask.definition.monitoringDataFlag&#39;;
$client-&amp;gt;setObjectMask($objectMask);

try {
    // getConfigurationValues() returns an array of
    // SoftLayer_Monitoring_Agent_Configuration_Value objects.
    $cdmConfigurationValues = $client-&amp;gt;getConfigurationValues();
} catch (Exception $e) {
    die(&#39;Unable to retrieve monitoring agent configuration template: &#39; . $e-&amp;gt;getMessage());
}

/**
 * SoftLayer_Monitoring_Agent_Configuration_Value is used to retrieve metric data types.
 * Check if the agent configuration value for each definition
 * has been enabled. Otherwise, we will not have any metric data.
 */
// Define the containers to hold the metric data types we will retrieve
$metricDataTypes = array();

foreach ($cdmConfigurationValues as $configurationValue) {

    // Ensure that this value is set to true
    if ((bool) $configurationValue-&amp;gt;value == false) {
        continue;
    }

    // Ensure that the monitoring data flag is true
    if ($configurationValue-&amp;gt;definition-&amp;gt;monitoringDataFlag !== true) {
        continue;
    }

    // Get the metricDataType for this configuration value
    $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent_Configuration_Value&#39;, $configurationValue-&amp;gt;id, $apiUsername, $apiKey);
    try {
        $metricDataTypes[] = $client-&amp;gt;getMetricDataType();
    } catch (Exception $e) {
        die(&#39;Unable to retrieve metric data type: &#39; . $e-&amp;gt;getMessage());
    }
}

/**
 * Retrieving data for an individual metric.
 *
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 *
 * We will be retrieving the &amp;quot;Graph Total CPU Usage&amp;quot; metric data.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

try {
    // getGraphData() returns a SoftLayer_Metric_Tracking_Object_Data object.
    $data = $client-&amp;gt;getGraphData($metricDataTypes, $startDate, $endDate);
    echo &amp;quot;Data retrieved! &amp;quot; . count($data) . &amp;quot; data points\n\r&amp;quot;;
} catch (Exception $e) {
    die(&#39;Unable to retrieve metric data: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>