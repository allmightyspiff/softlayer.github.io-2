<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Python on SoftLayer API Examples </title>
    <link>/python/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 29 Apr 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Create A Domain</title>
      <link>/python/createDNS/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createDNS/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        zone_name = &#39;lablayer2.info&#39;
        zone_client = self.client[&#39;SoftLayer_Dns_Domain&#39;]
        the_zone =  {
            &#39;name&#39; : zone_name,
            &#39;resourceRecords&#39; : [ 
                {
                    &#39;data&#39; : &#39;123.123.123.123&#39;,
                    &#39;host&#39; : &#39;ns1&#39;,
                    &#39;type&#39; : &#39;a&#39;,
                },
                {
                    &#39;data&#39; : &#39;123.123.123.123&#39;,
                    &#39;host&#39; : &#39;ns2&#39;,
                    &#39;type&#39; : &#39;a&#39;,
                },
                {
                    &#39;data&#39; : &#39;123.123.123.123&#39;,
                    &#39;host&#39; : &#39;@&#39;,
                    &#39;type&#39; : &#39;a&#39;,
                },
                {
                    &#39;data&#39; : &#39;ns2.lablayer2.info.&#39;,
                    &#39;host&#39; : &#39;@&#39;,
                    &#39;type&#39; : &#39;ns&#39;,
                },
                {
                    &#39;data&#39; : &#39;ns1.lablayer2.info.&#39;,
                    &#39;host&#39; : &#39;@&#39;,
                    &#39;type&#39; : &#39;ns&#39;,
                }
            ]
        }
        the_soa = {
            &#39;data&#39; : &#39;ns1.lablayer2.info.&#39;,
            &#39;type&#39; : &#39;soa&#39;,
            &#39;responsiblePerson&#39; : &#39;root.lablayer2.info.&#39;
        }
        # result = zone_client.createObject(the_zone)
        # pp(result)

        mask = &amp;quot;mask[resourceRecords]&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;
        getByDomainName will do a greedy search, so make sure you are searching for 
        the exact domain you want, otherwise you might get back more than 1 result.
        &amp;quot;&amp;quot;&amp;quot;
        zone_result = zone_client.getByDomainName(zone_name, mask=mask)
        # pp(zone_result)

        &amp;quot;&amp;quot;&amp;quot;
        SoftLayer creates each zone with a standard SOA record.
        The SOA record can only be changed after creation. This isn&#39;t
        usually needed, but here is how to do it.
        &amp;quot;&amp;quot;&amp;quot;
        for zone in zone_result[0][&#39;resourceRecords&#39;]:
            if zone[&#39;type&#39;].lower() is &#39;soa&#39;:
                zone_client.editObject(the_soa, id=zone[&#39;id&#39;])


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>/python/createBWpool/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createBWpool/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
# For nice debug output:
from pprint import pprint as pp


# Set the needed values to create a new item
accountId = 111111

# The values for bandwidthAllotmentTypeId are: (1) and (2)
# where: (1) means this allotment is marked as a virtual private rack or
#        (2) bandwidth pooling
bandwidthAllotmentTypeId = 2

# To get locationGroupId, execute: SoftLayer_Location_Group::getAllObjects
locationGroupId = 1
newBandwithPoolName = &#39;newBWpool&#39;

# Create an object template to create the item.
objectTemplate = {
    &#39;accountId&#39;: accountId,
    &#39;bandwidthAllotmentTypeId&#39;: bandwidthAllotmentTypeId,
    &#39;locationGroupId&#39;: locationGroupId,
    &#39;name&#39;: newBandwithPoolName
}

# Creates a new connection to the API service.
client = SoftLayer.Client()

try:
    result = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;].createObject(objectTemplate)
    pp(result)

except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed ... Unable to create a new Bandwidth Pool  faultCode=%s, faultString=%s&#39;
        % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>/python/createLBpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/createLBpython/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a load balancer

Important manual pages:
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json


# The package to order load balancers.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to
# return just the standard (location agnostic) itemPriceId&#39;s.
# https://gist.github.com/greyhoundforty/a0b55afcab9bc758405e21a39b93c63d
# In my case I am going with &#39;Load Balancer 500 VIP Connections&#39;

prices = [
   {
       &amp;quot;id&amp;quot;: 2078
   }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

orderData = {
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;location&amp;quot;: &amp;quot;DALLAS06&amp;quot;
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>/python/adjustpool/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/adjustpool/</guid>
      <description>&lt;p&gt;The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()

hardwareToAdd = [{&amp;quot;id&amp;quot;: 123456 }] # ID&#39;s for any bare metal servers to add to the pool
hardwareToRemove = [] # ID&#39;s for any bare metal servers to remove from the pool
cloudsToAdd = [] #  ID&#39;s for any virtual guests to add to the pool
cloudsToRemove = [{&amp;quot;id&amp;quot;: 987654 }] #  ID&#39;s for any virtual guests to remove from the pool

pool_id = &#39;11111111&#39; # Bandwidth Pool ID
adjustpool = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;].requestVdrContentUpdates(hardwareToAdd, hardwareToRemove, cloudsToAdd, cloudsToRemove, id=pool_id)
pp(adjustpool)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/location_based_pricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in â€”or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

package_id = 194
datacenter = &#39;dal06&#39;

client = SoftLayer.Client()

location_object_filter = {
    &#39;name&#39;: {&#39;operation&#39;: datacenter}
}

location_object_mask = &amp;quot;priceGroups&amp;quot;

location = client[&amp;quot;SoftLayer_Location_Datacenter&amp;quot;].getDatacenters(filter=location_object_filter, mask=location_object_mask)

if len(location) == 0:
    # error handling
    exit()

# lookup location group ids
location_group_ids = []
for location_group in location[0][&amp;quot;priceGroups&amp;quot;]:
    location_group_ids.append(location_group[&amp;quot;id&amp;quot;])

object_filter_standard = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
}

standard_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_standard)

object_filter_location = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;in&amp;quot;,
                &amp;quot;options&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;data&amp;quot;,
                        &amp;quot;value&amp;quot;: location_group_ids
                    }
                ]
            }
        }
    }
}

location_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_location)

# let&#39;s key by item id
items = {}

for standard_item in standard_items:
    for location_item in location_items:
        if location_item[&amp;quot;id&amp;quot;] == standard_item[&amp;quot;id&amp;quot;]:
            items[location_item[&amp;quot;id&amp;quot;]] = location_item
            break

    if standard_item[&amp;quot;id&amp;quot;] not in items:
        items[standard_item[&amp;quot;id&amp;quot;]] = standard_item


print(json.dumps(items, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/python/standard_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/standard_pricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

object_filter = {
    &#39;items&#39;: {
        &#39;prices&#39;: {
            &#39;locationGroupId&#39;: {
                &#39;operation&#39;: &#39;is null&#39;
            }
        }
    }
}

client = SoftLayer.Client()
items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=194, filter=object_filter)

print(json.dumps(items, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Backup and Restore firewall rules</title>
      <link>/python/manage_firewall_rules/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/manage_firewall_rules/</guid>
      <description>&lt;p&gt;restoreRules here will clobber any existing rules on the firewall, so be careful with that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
import SoftLayer
from SoftLayer.CLI import firewall
from pprint import pprint as pp
import json
from argparse import ArgumentParser

class ruleSaver():

    def __init__(self, path, fw):
        self.client = SoftLayer.Client()
        self.fw = SoftLayer.FirewallManager(self.client)
        self.path = path
        self.fw_type, self.fw_id = firewall.parse_id(fw)

    def saveRules(self):
        if self.fw_type == &#39;vlan&#39;:
            rules = self.fw.get_dedicated_fwl_rules(self.fw_id)
        else:  
            rules = self.fw.get_standard_fwl_rules(self.fw_id)
        with open(self.path, &#39;w&#39;) as f:
            json.dump(rules,f)
        print(&amp;quot;Done saving rules to %s&amp;quot; % self.path)

    def restoreRules(self):
        with open(self.path, &#39;r&#39;) as f:
            rules = json.load(f)
        if self.fw_type == &#39;vlan&#39;:
            result = self.fw.edit_dedicated_fwl_rules(self.fw_id,rules)
        else:  
            result = self.fw.edit_standard_fwl_rules(self.fw_id,rules)
        return result

if __name__ == &amp;quot;__main__&amp;quot;:
    
    parser = ArgumentParser(description=&#39;Backup/Restore firewall rules&#39;)
    parser.add_argument(&#39;-f&#39;, nargs=1, type=str, required=True, metavar=&amp;quot;[/path/to/file]&amp;quot;, dest=&amp;quot;path&amp;quot;,
        help=&amp;quot;File to save to / restore from&amp;quot;)
    parser.add_argument(&#39;-i&#39;, nargs=1, type=str, required=True, metavar=&amp;quot;[type:id]&amp;quot;, dest=&amp;quot;fw&amp;quot;,
        help=&amp;quot;Firewall ID, same format as &#39;slcli firewall list&#39;. vlan:1234, vs:1234, sever:1234&amp;quot;)
    parser.add_argument(&#39;-a&#39;, nargs=1, type=str, required=True, metavar=&amp;quot;[save|restore]&amp;quot;, dest=&amp;quot;action&amp;quot;,
        help=&amp;quot;save to file, or restore from file. restore completely overwrites any existing rules&amp;quot;)

    args = parser.parse_args()
    main = ruleSaver(args.path[0],args.fw[0])
    action = args.action[0]

    if action == &#39;restore&#39;:
        result = main.restoreRules()
        pp(result)
    else:
        main.saveRules()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>/python/attach_disk/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/attach_disk/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, image_id, guest_id):
        my_image = self.getMyImage(image_id)
        size = my_image.get(&amp;quot;capacity&amp;quot;, 100)
        &amp;quot;&amp;quot;&amp;quot;
        SAN based guests will throw the following exception:
        SoftLayer.exceptions.SoftLayerAPIError: SoftLayerAPIError(SoftLayer_Exception_Public): This guest is SAN-based, and does not require host migration for disk attachment.
        &amp;quot;&amp;quot;&amp;quot;
        available = self.client[&#39;SoftLayer_Virtual_Guest&#39;].checkHostDiskAvailability(size,id=guest_id)
        # This should be True. False means the host doesn&#39;t have enough disk space to attach
        pp(available)

        attach = self.client[&#39;SoftLayer_Virtual_Guest&#39;].attachDiskImage(image_id, id=guest_id)
        print(&amp;quot;Attaching storage&amp;quot;)
        pp(attach)

    def getImages(self):

        mask = &amp;quot;mask[type,blockDevices[guest]]&amp;quot;
        images = self.client[&#39;SoftLayer_Account&#39;].getPortableStorageVolumes(mask=mask)

        for image in images:
            desc = image.get(&#39;description&#39;, &amp;quot;---&amp;quot;)
            capacity = image.get(&#39;capacity&#39;, &amp;quot;0&amp;quot;)
            print(&amp;quot;%s - %s (%s) - %s &amp;quot; % 
                (image[&#39;id&#39;], image[&#39;type&#39;][&#39;keyName&#39;], capacity ,desc)
            )
            for disk in image[&#39;blockDevices&#39;]:
                try:
                    hostname = disk[&#39;guest&#39;][&#39;fullyQualifiedDomainName&#39;]
                except KeyError:
                    hostname = &amp;quot;None&amp;quot;
                print(&amp;quot;\t%s&amp;quot; % hostname)

    def getMyImage(self,imageId):
        mask = &amp;quot;mask[blockDevices[guest],sourceDiskImage,type]&amp;quot;
        image = self.client[&#39;SoftLayer_Virtual_Disk_Image&#39;].getObject(mask=mask,id=imageId)
        pp(image)
        return image


if __name__ == &amp;quot;__main__&amp;quot;:
    image_id = 12345
    guest_id = 67890
    main = example()
    main.getImages()
    main.main(image_id, guest_id)
    # The new guest will only show up on the image once the migration transaction is completed
    main.getMyImage(image_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Update Firmware on a Bare Metal Server</title>
      <link>/python/update_firmware/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/update_firmware/</guid>
      <description>&lt;p&gt;In the following example we are updating the firmware for the IPMI, BIOS, Hard Drives, and Raid Controller on our Bare Metal Server with ID 12345. We can toggle the specific items we want updated by setting the values to False (Do not update firmware) or True (Do update firmware).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
client = SoftLayer.Client()
mgr = SoftLayer.HardwareManager(client)

result = mgr.update_firmware(hardware_id=12345,ipmi=True,raid_controller=True,bios=True,hard_drive=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manage Users</title>
      <link>/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/manageUsers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/notifications/</guid>
      <description>&lt;p&gt;Retrieves all notifications that were created on January 1, 2016.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        theDate = &#39;01/01/2016 01:00:00&#39;
        _filter = {
                &#39;startDate&#39;: { 
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                }
            }
        result = self.client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=_filter)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp
import logging

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        theDate = &amp;quot;02/25/2016 01:00:00&amp;quot;
        endDate = &amp;quot;02/29/2016 01:00:00&amp;quot;

        mask = &amp;quot;mask[updates,group[name]]&amp;quot;


        theFilter1 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }

        theFilter2 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                },
                &#39;group&#39; : {
                    &#39;name&#39;: {
                        &#39;operation&#39;: &#39;Cancellations&#39;
                    }
                    
                }
            }
        }

        result = self.client[&#39;SoftLayer_Account&#39;].getTickets(filter=theFilter2, mask=mask)
        for ticket in result:
            print(&amp;quot;===============&amp;quot;)
            print(&amp;quot;%s - %s (%s)&amp;quot; % (ticket[&#39;createDate&#39;], ticket[&#39;title&#39;], ticket[&#39;group&#39;][&#39;name&#39;]))
            for update in ticket[&#39;updates&#39;]:
                print(&amp;quot;===============%s=============== &amp;quot; % (update[&#39;createDate&#39;]))
                print(&amp;quot;%s&amp;quot; % update[&#39;entry&#39;])
                print(&amp;quot;===============&amp;quot;)

        # pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a support ticket</title>
      <link>/python/create_ticket/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/create_ticket/</guid>
      <description>&lt;p&gt;Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket_Subject&#34;&gt;SoftLayer_Ticket_Subject&lt;/a&gt; service. The following example will output all of the Ticket Subjects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
subjects = client[&#39;Ticket_Subject&#39;].getAllObjects()
pp(subjects)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the Ticket Subject ID you can pass it to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket/createStandardTicket&#34;&gt;createStandardTicket&lt;/a&gt;. In the following example we are opening a ticket under the subject Hardware Firewall Question (ID 1121).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
client = SoftLayer.Client()
currentUser = client[&#39;Account&#39;].getCurrentUser()
new_ticket = {
       &#39;subjectId&#39;: 1121,
       &#39;assignedUserId&#39;: currentUser[&#39;id&#39;]
}
created_ticket = client[&#39;Ticket&#39;].createStandardTicket(new_ticket, &amp;quot;Content of the ticket goes here&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/python/cancel_service/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/cancel_service/</guid>
      <description>&lt;p&gt;In the following example we are retrieving the Billing Item of a Virtual Guest with the ID of 12345678 and passing that ID to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService&#34;&gt;cancelService&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=12345678)
cancelItem = client[&#39;SoftLayer_Billing_Item&#39;].cancelService(id = billingId[&#39;id&#39;])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>