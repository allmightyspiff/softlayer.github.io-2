<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 30 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Getting started with SoftLayer and Terraform</title>
      <link>/terraform/getting_started/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/terraform/getting_started/</guid>
      <description>

&lt;h3 id=&#34;overview:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions. Terraform supports several Cloud Service providers by default but is also extensible with plugins written in Go.&lt;/p&gt;

&lt;p&gt;The infrastructure Terraform can manage includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc.&lt;/p&gt;

&lt;h3 id=&#34;installing-terraform:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Installing Terraform&lt;/h3&gt;

&lt;p&gt;You can grab the installer for your specific Operating System on the Terraform &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;Download Page&lt;/a&gt;. Terraform will run on OS X, Linux, FreeBSD and Windows.&lt;/p&gt;

&lt;h3 id=&#34;terraform-configuration:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Terraform Configuration&lt;/h3&gt;

&lt;p&gt;Terraform uses text files to describe infrastructure and to set variables. These text files are called Terraform configurations and end in &lt;code&gt;.tf&lt;/code&gt;. This section talks about the format of these files as well as how they&amp;rsquo;re loaded.&lt;/p&gt;

&lt;p&gt;The format of the configuration files are able to be in two formats: Terraform format and JSON. The Terraform format is more human-readable, supports comments, and is the generally recommended format for most Terraform files. The JSON format is meant for machines to create, modify, and update, but can also be done by Terraform operators if you prefer. Terraform format ends in &lt;code&gt;.tf&lt;/code&gt; and JSON format ends in &lt;code&gt;.tf.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to put credentials in your configuration file, you can leave them out and use &lt;code&gt;provider &amp;quot;softlayer&amp;quot; {}&lt;/code&gt; in the configuration file and instead set these environment variables:&lt;/p&gt;

&lt;p&gt;SOFTLAYER_USERNAME: Your SoftLayer username
SOFTLAYER_API_KEY: Your API key&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a SoftLayer Virtual Guest</title>
      <link>/terraform/create_vsi/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/terraform/create_vsi/</guid>
      <description>

&lt;p&gt;This example will create a virtual guest running the latest offered version of Ubuntu in the Dallas 09 Datacenter.&lt;/p&gt;

&lt;h3 id=&#34;configuration-file:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Configuration File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;softlayer&amp;quot; {}

# Virtual Server created with existing SSH Key already in SoftLayer 

resource &amp;quot;softlayer_virtual_guest&amp;quot; &amp;quot;terraform&amp;quot; {
    name = &amp;quot;terraform&amp;quot;
    domain = &amp;quot;tinylab.info&amp;quot;
    ssh_keys = [&amp;quot;563523&amp;quot;]
    image = &amp;quot;UBUNTU_LATEST_64&amp;quot;
    region = &amp;quot;dal09&amp;quot;
    public_network_speed = 100
    cpu = 1
    ram = 1024
    local_disk = &amp;quot;false&amp;quot;
    hourly_billing = &amp;quot;true&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;terraform-plan:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Terraform Plan&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;terraform plan&lt;/code&gt; command will look at any &lt;code&gt;.tf&lt;/code&gt; file in the current directory and show you what Terraform would do if we applied the configuration aka running &lt;code&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan

+ softlayer_virtual_guest.terraform
    cpu:                  &amp;quot;1&amp;quot;
    domain:               &amp;quot;tinylab.info&amp;quot;
    hourly_billing:       &amp;quot;true&amp;quot;
    image:                &amp;quot;UBUNTU_LATEST_64&amp;quot;
    ipv4_address:         &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    ipv4_address_private: &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    local_disk:           &amp;quot;false&amp;quot;
    name:                 &amp;quot;terraform&amp;quot;
    private_network_only: &amp;quot;false&amp;quot;
    public_network_speed: &amp;quot;100&amp;quot;
    ram:                  &amp;quot;1024&amp;quot;
    region:               &amp;quot;dal09&amp;quot;
    ssh_keys.#:           &amp;quot;1&amp;quot;
    ssh_keys.0:           &amp;quot;563523&amp;quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;terraform-apply:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Terraform apply&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ terraform apply 

  cpu:                  &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;
  domain:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;tinylab.info&amp;quot;
  hourly_billing:       &amp;quot;&amp;quot; =&amp;gt; &amp;quot;true&amp;quot;
  image:                &amp;quot;&amp;quot; =&amp;gt; &amp;quot;UBUNTU_LATEST_64&amp;quot;
  ipv4_address:         &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
  ipv4_address_private: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
  local_disk:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;
  name:                 &amp;quot;&amp;quot; =&amp;gt; &amp;quot;terraform&amp;quot;
  private_network_only: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;
  public_network_speed: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;100&amp;quot;
  ram:                  &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1024&amp;quot;
  region:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;dal09&amp;quot;
  ssh_keys.#:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;
  ssh_keys.0:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;563523&amp;quot;

$ terraform show 

softlayer_virtual_guest.terraform:
  id = 24618829
  cpu = 1
  dedicated_acct_host_only = false
  domain = tinylab.info
  hourly_billing = true
  image = UBUNTU_LATEST_64
  ipv4_address = 169.44.104.77
  ipv4_address_private = 10.143.223.17
  local_disk = false
  name = terraform
  private_network_only = true
  public_network_speed = 100
  ram = 1024
  region = dal09
  ssh_keys.# = 1
  ssh_keys.0 = 563523
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>/php/createVsi/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/createVsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$template = new stdClass();
$template-&amp;gt;location = 1441195;
$template-&amp;gt;datacenter-&amp;gt;name = &#39;dal10&#39;;
$template-&amp;gt;domain = &#39;example.com&#39;;
$template-&amp;gt;startCpus = 2;
$template-&amp;gt;maxMemory = 2048;
$template-&amp;gt;operatingSystemReferenceCode = &#39;CENTOS_6_64&#39;;
$template-&amp;gt;hostname = &#39;testphp&#39;;
$template-&amp;gt;localDiskFlag = True;
$template-&amp;gt;hourlyBillingFlag = True;
$template-&amp;gt;dedicatedAccountHostOnlyFlag = False;
$template-&amp;gt;primaryBackendNetworkComponent = 1286783;
$template-&amp;gt;primaryNetworkComponent = 1286781;
$template-&amp;gt;privateNetworkOnlyFlag = False;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,null, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createObject($template);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>/ruby/createVSI/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/createVSI/</guid>
      <description>&lt;p&gt;When you are ready to place the order change &lt;code&gt;verifyOrder(productOrder)&lt;/code&gt; to &lt;code&gt;placeOrder(productOrder)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

productOrder = {
  &#39;virtualGuests&#39; =&amp;gt; [{
     &#39;hostname&#39; =&amp;gt; &#39;testRuby&#39;,
     &#39;domain&#39;   =&amp;gt; &#39;example.com&#39;,
     &#39;primaryBackendNetworkComponent&#39; =&amp;gt; { &#39;networkVlan&#39; =&amp;gt; { &#39;id&#39; =&amp;gt; 1286783 } }
  }],
  &#39;location&#39; =&amp;gt; 1441195,
  &#39;packageId&#39; =&amp;gt; 46,
  &#39;operatingSystemReferenceCode&#39; =&amp;gt; &#39;CENTOS_6_64&#39;, 
  &#39;useHourlyPricing&#39; =&amp;gt; false,
  &#39;prices&#39; =&amp;gt; [
     {&#39;id&#39; =&amp;gt; 1640 }, # 1 x 2.0 GHz Core
     {&#39;id&#39; =&amp;gt; 1644 }, # 1 GB RAM
     {&#39;id&#39; =&amp;gt; 13945 }, # CENTOS_6_64
     {&#39;id&#39; =&amp;gt; 1639 }, # 100 GB (SAN) First Disk
     {&#39;id&#39; =&amp;gt; 2277 }, # 100 GB (SAN) Second Disk
     {&#39;id&#39; =&amp;gt; 50367 }, # 250 GB Bandwidth
     {&#39;id&#39; =&amp;gt; 274 }, # 1 Gbps Public &amp;amp; Private Network Uplinks
     {&#39;id&#39; =&amp;gt; 21 }, # 1 IP Address
     {&#39;id&#39; =&amp;gt; 420 }, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
     {&#39;id&#39; =&amp;gt; 56 }, # Host Ping and TCP Service Monitoring
     {&#39;id&#39; =&amp;gt; 57 }, # Email and Ticket
     {&#39;id&#39; =&amp;gt; 418 }, # NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
     {&#39;id&#39; =&amp;gt; 905 }, # REBOOT_REMOTE_CONSOLE
     {&#39;id&#39; =&amp;gt; 58 }  # AUTOMATED_NOTIFICATION
  ]
}

order = client[&#39;Product_Order&#39;].verifyOrder(productOrder)

pp order

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/ruby/getStandardPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getStandardPricing/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new do |object_filter|
  object_filter.accept(&#39;items.prices.locationGroupId&#39;).when_it is_null
end

location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/getLocationPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new
object_filter.set_criteria_for_key_path(&#39;items.prices.locationGroupId&#39;,
	&#39;operation&#39; =&amp;gt; &#39;in&#39;,
        &#39;options&#39; =&amp;gt; [{
        &#39;name&#39; =&amp;gt; &#39;data&#39;,
        &#39;value&#39; =&amp;gt; 1441195
        }])


location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: August 28, 2016</title>
      <link>/release_notes/20160828/</link>
      <pubDate>Sun, 28 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/release_notes/20160828/</guid>
      <description>

&lt;h4 id=&#34;portal:b9d5ea7172071ff57acc312ad34716d7&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code fix that filters Vlans with respect to Datacenter selected when ordering Dedicated firewall.&lt;/li&gt;
&lt;li&gt;Pushed code fix that filters the severs based on Datacenter selected and the price capacity when ordering hardware firewall.&lt;/li&gt;
&lt;li&gt;Resolved an issue what was causing storage group templates with JBODs to not load correctly in the order forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:b9d5ea7172071ff57acc312ad34716d7&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug that was causing the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getMemoryMetricImageByDate&#34;&gt;SoftLayer_Virtual_Guest::getMemoryMetricImageByDate&lt;/a&gt; method to return an incorrect graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:b9d5ea7172071ff57acc312ad34716d7&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>/php/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/enableSnapshots/</guid>
      <description>&lt;p&gt;This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storage_id = 11657445;

$scheduleType = &#39;WEEKLY&#39;;
$retentionCount = &#39;20&#39;;
$minute = &#39;1&#39;;
$hour = &#39;13&#39;;
$dayOfWeek = &#39;SUNDAY&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage&#39;, $storage_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;enableSnapshots($scheduleType, $retentionCount, $minute, $hour, $dayOfWeek);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>/python/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/python/enableSnapshots/</guid>
      <description>&lt;p&gt;This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer

client = SoftLayer.Client()
storageId = 11657445

# Define parameters for snapshot
scheduleType = &#39;WEEKLY&#39;
retentionCount = &#39;20&#39;
minute = &#39;1&#39;
hour = &#39;13&#39;
dayOfWeek = &#39;SUNDAY&#39;

try:
    result = client[&#39;SoftLayer_Network_Storage&#39;].enableSnapshots(scheduleType, retentionCount, minute, hour, dayOfWeek, id=storageId)
    print (result)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Error: &amp;quot;
          % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>/ruby/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/enableSnapshots/</guid>
      <description>&lt;p&gt;This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

storageId = 11657445

# Define parameters for snapshot
scheduleType = &#39;WEEKLY&#39;
retentionCount = &#39;20&#39;
minute = &#39;1&#39;
hour = &#39;13&#39;
dayOfWeek = &#39;SUNDAY&#39;

snap = client[&#39;SoftLayer_Network_Storage&#39;]
enable = snap.object_with_id(storageId).enableSnapshots(scheduleType, retentionCount, minute, hour, dayOfWeek)
pp enable 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>/php/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/attach_detach/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$guest_id = 22983449;
$storage_id = 20309395;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;attachDiskImage($storage_id);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detach the disk simply change &lt;code&gt;$client-&amp;gt;attachDiskImage($storage_id)&lt;/code&gt; to &lt;code&gt;$client-&amp;gt;detachDiskImage($storage_id)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/php/getStandardPricing/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/getStandardPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$packageId = 194;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey);
  $filter = new stdClass();
  $filter-&amp;gt;items = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId-&amp;gt;operation = &#39;is null&#39;;
  $client-&amp;gt;setObjectFilter($filter);

  $standardPricing = $client-&amp;gt;getItems();
  print_r($standardPricing);
}  catch (\Exception $e) {
    die(&#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get IPMI info for Bare Metal Server</title>
      <link>/php/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_ipmi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$server_id = 882187;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, $server_id, $apiUsername, $apiKey);
  $objectMask = new \SoftLayer\Common\ObjectMask();
  $objectMask-&amp;gt;networkManagementIpAddress;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;username;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;password;
  $objectMask-&amp;gt;id;
  $objectMask-&amp;gt;fullyQualifiedDomainName;
  $client-&amp;gt;setObjectMask($objectMask);
  $response = $client-&amp;gt;getHardware($objectMask);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: August 22, 2016</title>
      <link>/release_notes/20160822/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/release_notes/20160822/</guid>
      <description>

&lt;h4 id=&#34;portal:471582aafec30b94617a1309436ab245&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:471582aafec30b94617a1309436ab245&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:471582aafec30b94617a1309436ab245&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug that was causing Resets of Dedicated Hardware Firewalls to fail if they were in a High Availablity Pair.&lt;/li&gt;
&lt;li&gt;Put code in place to ensure that cached disks from image templates are deleted when parent Virtual Disk Image is deleted.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>/ruby/adjustpool/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/ruby/adjustpool/</guid>
      <description>&lt;p&gt;The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
pool_id = 123456

hardwareToAdd = []
hardwareToRemove = []
cloudsToAdd = [ {&#39;id&#39; =&amp;gt; 23123143 } ]
cloudsToRemove = []

addRemove = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;]
item = addRemove.object_with_id(pool_id).requestVdrContentUpdates(hardwareToAdd,hardwareToRemove,cloudsToAdd,cloudsToRemove)

pp item
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>