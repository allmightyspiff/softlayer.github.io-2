<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Php on SoftLayer API Examples </title>
    <link>/php/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Thu, 01 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>/php/createVsi/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/createVsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$template = new stdClass();
$template-&amp;gt;location = 1441195;
$template-&amp;gt;datacenter-&amp;gt;name = &#39;dal10&#39;;
$template-&amp;gt;domain = &#39;example.com&#39;;
$template-&amp;gt;startCpus = 2;
$template-&amp;gt;maxMemory = 2048;
$template-&amp;gt;operatingSystemReferenceCode = &#39;CENTOS_6_64&#39;;
$template-&amp;gt;hostname = &#39;testphp&#39;;
$template-&amp;gt;localDiskFlag = True;
$template-&amp;gt;hourlyBillingFlag = True;
$template-&amp;gt;dedicatedAccountHostOnlyFlag = False;
$template-&amp;gt;primaryBackendNetworkComponent = 1286783;
$template-&amp;gt;primaryNetworkComponent = 1286781;
$template-&amp;gt;privateNetworkOnlyFlag = False;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,null, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createObject($template);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>/php/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/enableSnapshots/</guid>
      <description>&lt;p&gt;This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storage_id = 11657445;

$scheduleType = &#39;WEEKLY&#39;;
$retentionCount = &#39;20&#39;;
$minute = &#39;1&#39;;
$hour = &#39;13&#39;;
$dayOfWeek = &#39;SUNDAY&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage&#39;, $storage_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;enableSnapshots($scheduleType, $retentionCount, $minute, $hour, $dayOfWeek);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>/php/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/attach_detach/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$guest_id = 22983449;
$storage_id = 20309395;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;attachDiskImage($storage_id);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detach the disk simply change &lt;code&gt;$client-&amp;gt;attachDiskImage($storage_id)&lt;/code&gt; to &lt;code&gt;$client-&amp;gt;detachDiskImage($storage_id)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>/php/getStandardPricing/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/getStandardPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$packageId = 194;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey);
  $filter = new stdClass();
  $filter-&amp;gt;items = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId = new stdClass();
  $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId-&amp;gt;operation = &#39;is null&#39;;
  $client-&amp;gt;setObjectFilter($filter);

  $standardPricing = $client-&amp;gt;getItems();
  print_r($standardPricing);
}  catch (\Exception $e) {
    die(&#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get IPMI info for Bare Metal Server</title>
      <link>/php/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_ipmi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$server_id = 882187;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, $server_id, $apiUsername, $apiKey);
  $objectMask = new \SoftLayer\Common\ObjectMask();
  $objectMask-&amp;gt;networkManagementIpAddress;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;username;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;password;
  $objectMask-&amp;gt;id;
  $objectMask-&amp;gt;fullyQualifiedDomainName;
  $client-&amp;gt;setObjectMask($objectMask);
  $response = $client-&amp;gt;getHardware($objectMask);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>/php/createBwPool/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/createBwPool/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);


$template = new stdClass();
$template-&amp;gt;accountId = xxxx;
$template-&amp;gt;bandwidthAllotmentTypeId  = 2;
$template-&amp;gt;locationGroupId = 1;
$template-&amp;gt;name  = &#39;newBWpoolPHP&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;,null, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createObject($template);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>/php/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/createSnapshot/</guid>
      <description>&lt;p&gt;Trigger a manual snapshot creation of a Block storage volume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createSnapshot();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $response = $client-&amp;gt;getSnapshotsForVolume();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>/php/storage_credentials/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/storage_credentials/</guid>
      <description>&lt;p&gt;The following script allows you retrieve the username and password for Performance/Endurance Block storage. If you have not autorized hosts against the storage then you will get some basic information about the Block storage as a result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */ 

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $objectMask = new \SoftLayer\Common\ObjectMask();
  $objectMask-&amp;gt;allowedHardware-&amp;gt;allowedHost-&amp;gt;credential;
  $objectMask-&amp;gt;allowedVirtualGuests-&amp;gt;allowedHost-&amp;gt;credential;
  $client-&amp;gt;setObjectMask($objectMask);

  $response = $client-&amp;gt;getObject();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>/php/add_remove_from_pool/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/add_remove_from_pool/</guid>
      <description>&lt;p&gt;The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$pool_id = 316749;

$template = new stdClass();
$template-&amp;gt;hardwareToAdd = array();
$template-&amp;gt;hardwareToRemove  = array();
$vm = new stdClass();
$vm-&amp;gt;id =22983449;
$template -&amp;gt; cloudsToAdd[] = $vm;
$template -&amp;gt; cloudsToRemove = array();

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;, $pool_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;requestVdrContentUpdates($template);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a support ticket</title>
      <link>/php/create_ticket/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/create_ticket/</guid>
      <description>&lt;p&gt;Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket_Subject&#34;&gt;SoftLayer_Ticket_Subject&lt;/a&gt; service. The following example will output all of the Ticket Subjects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Ticket_Subject&#39;, null, $apiUsername, $apiKey);
$subjects = $client-&amp;gt;getAllObjects();

print_r($subjects);
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the Ticket Subject ID you can pass it to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket/createStandardTicket&#34;&gt;createStandardTicket&lt;/a&gt;. In the following example we are opening a ticket under the subject Hardware Firewall Question (ID 1121).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$template = new stdClass();
$template-&amp;gt;subjectId = 1121;
$template-&amp;gt;assignedUserId = 123456;

$content = &amp;quot;Content of the ticket goes here&amp;quot;;

$created_ticket = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Ticket&#39;, null, $apiUsername, $apiKey);
$response = $created_ticket-&amp;gt;createStandardTicket($template, $content);

print_r($response);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/php/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/cancelservice/</guid>
      <description>&lt;p&gt;In order to cancel an item or service you must know the billing item ID. In the following example we are retrieving the billing item ID for our Virtual Guest with ID &amp;lsquo;15690533&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$itemId = &#39;15690533&#39;; # ID of the service or item you want to get the billing ID of
$invokeService = &#39;SoftLayer_Virtual_Guest&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($invokeService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;getBillingItem();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to get billing ID from the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the billing item ID we can plug it in to the cancelservice code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$billingitemId = &#39;1234567&#39;; # Billing ID of the service or item you want to cancel obtained from the previous example
$billingItemService = &#39;SoftLayer_Billing_Item&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($billingItemService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;cancelService();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to cancel the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/getnextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey);

try {
    $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount();
    print_r($nextinvoice);
}  catch (\Exception $e) {
    die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>/php/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$guest = &#39;1234567&#39;; # Put your VSI ID here

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest, $apiUsername, $apiKey);
$objectMask = new \SoftLayer\Common\ObjectMask();
$objectMask-&amp;gt;createDate;
$objectMask-&amp;gt;hoursUsed;
$objectMask-&amp;gt;hourlyRecurringFee;
$objectMask-&amp;gt;currentHourlyCharge;

$client-&amp;gt;setObjectMask($objectMask);
$response = $client-&amp;gt;getBillingItem();
print_r($response)
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderFirewalls/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();
        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices=1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function placeOrderHardwareFirewall() {
        // http://sldn.softlayer.com/blog/phil/Getting-Started-Firewalls
        // The speed of the firewall needs to match speed of the server
       
        // 3896 , HARDWARE_FIREWALL_HIGH_AVAILABILITY , Hardware Firewall (High Availability)
        // 297 , 1000MBPS_HARDWARE_FIREWALL , 1000Mbps Hardware Firewall
        // 298 , 100MBPS_HARDWARE_FIREWALL , 100Mbps Hardware Firewall
        // 1296 , 2000MBPS_HARDWARE_FIREWALL , 2000Mbps Hardware Firewall
        // 4550 , 20MBPS_HARDWARE_FIREWALL , 20Mbps Hardware Firewall
        // 299 , 10MBPS_HARDWARE_FIREWALL , 10Mbps Hardware Firewall
        // 1329 , HARDWARE_FIREWALL_DEDICATED , Hardware Firewall (Dedicated)
        // 4551 , 200MBPS_HARDWARE_FIREWALL , 200Mbps Hardware Firewall
        // $example-&amp;gt;getPackageById(0, 297 );
        // Generic Location Price
        // (
        //  [id] =&amp;gt; 408
        //  [itemId] =&amp;gt; 297
        //  [locationGroupId] =&amp;gt;
        //  [oneTimeFee] =&amp;gt; 0
        //  [recurringFee] =&amp;gt; 199
        //  [setupFee] =&amp;gt; 0
        // )
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 408;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();

        // Put your serverId here
        $serverToFirewall = new stdClass();
        $serverToFirewall-&amp;gt;id = 12345;
        $container-&amp;gt;hardware[0] = $serverToFirewall;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }


    function placeOrderFortigateAppliance() {
        // The speed of the firewall needs to match speed of the server
        // $example-&amp;gt;getPackageById(0, 4337 );
        // 4337 , FORTIGATE_SECURITY_APPLIANCE , FortiGate Security Appliance
        // 4338 , FORTIGATE_SECURITY_APPLIANCE_HIGH_AVAILABILITY , FortiGate Security Appliance (High Availability)
        // Generic Location Price
        // [id] =&amp;gt; 21514
        // [itemId] =&amp;gt; 4337
        // [locationGroupId] =&amp;gt;
        // [recurringFee] =&amp;gt; 999
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 21514;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();
        // Put the vlan id that you want to protect here
        $container-&amp;gt;vlanId = 12345;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

}


$example = new Example();
// $example-&amp;gt;getAllPackages();
// $example-&amp;gt;getPackageById(0, 297 );
// $example-&amp;gt;placeOrderHardwareFirewall();
// $example-&amp;gt;getPackageById(0, 4337 );
// $example-&amp;gt;placeOrderFortigateAppliance();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderBareMetal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices = 1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if ($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function getActiveRamItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveRamItems();
        print_r($items);
    }

    function getActiveServerItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveServerItems();
        print_r($items);
    }



    function placeOrder() {

        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();
        $container = new stdClass();

        $priceArray = array(
            49485, //INTEL_XEON_2650_2_00
            36253, //OS_WINDOWS_2012_R2_FULL_DC_64_BIT_2         
            49405, //RAM_16_GB
            876, //DISK_CONTROLLER_NONRAID
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            274, //1_GBPS_PUBLIC_PRIVATE_NETWORK_UPLINKS
            50261, //BANDWIDTH_20000_GB
            21, //1_IP_ADDRESS
            906, //REBOOT_KVM_OVER_IP
            420, //UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT
            56, //MONITORING_HOST_PING_AND_TCP_SERVICE
            57, //NOTIFICATION_EMAIL_AND_TICKET
            58, // response, AUTOMATED_NOTIFICATION
            418, //NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
            413, //MCAFEE_HOST_INTRUSION_PROTECTION_WREPORTING
            594, //MCAFEE_VIRUSSCAN_ANTIVIRUS_WINDOWS                    
        );
        $container-&amp;gt;prices = array();
        foreach ($priceArray as $item) {
            $priceId = new stdClass();
            $priceId-&amp;gt;id = $item;
            $container-&amp;gt;prices[] = $priceId;
        }

        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Hardware_Server&amp;quot;;
        $container-&amp;gt;packageId = 273;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;location = 448994;  //DAL05
        $container-&amp;gt;serverCount = 1;

        $hardware = new stdClass();
        $hardware-&amp;gt;domain = &amp;quot;test.com&amp;quot;;
        $hardware-&amp;gt;hostname = &amp;quot;thisIsTest&amp;quot;;
        $container-&amp;gt;hardware = $hardware;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }
}


$example = new Example();
// $example-&amp;gt;getAllPackages();

// Your package needs to have both activeRamItems and activeServerItems to be orderable.
// $example-&amp;gt;getActiveRamItems(273);
// $example-&amp;gt;getActiveServerItems(273);

//All price ids are from this function
// $example-&amp;gt;getPackageById(273,0,1);

$example-&amp;gt;placeOrder();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>