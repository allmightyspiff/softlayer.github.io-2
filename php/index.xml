<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Php on SoftLayer API Examples </title>
    <link>/php/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 29 Jan 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Cancel an item or service</title>
      <link>/php/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/cancelservice/</guid>
      <description>&lt;p&gt;In order to cancel an item or service you must know the billing item ID. In the following example we are retrieving the billing item ID for our Virtual Guest with ID &amp;lsquo;15690533&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$itemId = &#39;15690533&#39;; # ID of the service or item you want to get the billing ID of
$invokeService = &#39;SoftLayer_Virtual_Guest&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($invokeService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;getBillingItem();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to get billing ID from the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the billing item ID we can plug it in to the cancelservice code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$billingitemId = &#39;1234567&#39;; # Billing ID of the service or item you want to cancel obtained from the previous example
$billingItemService = &#39;SoftLayer_Billing_Item&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($billingItemService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;cancelService();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to cancel the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/getnextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey);

try {
    $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount();
    print_r($nextinvoice);
}  catch (\Exception $e) {
    die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>/php/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$guest = &#39;1234567&#39;; # Put your VSI ID here

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest, $apiUsername, $apiKey);
$objectMask = new \SoftLayer\Common\ObjectMask();
$objectMask-&amp;gt;createDate;
$objectMask-&amp;gt;hoursUsed;
$objectMask-&amp;gt;hourlyRecurringFee;
$objectMask-&amp;gt;currentHourlyCharge;

$client-&amp;gt;setObjectMask($objectMask);
$response = $client-&amp;gt;getBillingItem();
print_r($response)
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderFirewalls/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();
        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices=1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function placeOrderHardwareFirewall() {
        // http://sldn.softlayer.com/blog/phil/Getting-Started-Firewalls
        // The speed of the firewall needs to match speed of the server
       
        // 3896 , HARDWARE_FIREWALL_HIGH_AVAILABILITY , Hardware Firewall (High Availability)
        // 297 , 1000MBPS_HARDWARE_FIREWALL , 1000Mbps Hardware Firewall
        // 298 , 100MBPS_HARDWARE_FIREWALL , 100Mbps Hardware Firewall
        // 1296 , 2000MBPS_HARDWARE_FIREWALL , 2000Mbps Hardware Firewall
        // 4550 , 20MBPS_HARDWARE_FIREWALL , 20Mbps Hardware Firewall
        // 299 , 10MBPS_HARDWARE_FIREWALL , 10Mbps Hardware Firewall
        // 1329 , HARDWARE_FIREWALL_DEDICATED , Hardware Firewall (Dedicated)
        // 4551 , 200MBPS_HARDWARE_FIREWALL , 200Mbps Hardware Firewall
        // $example-&amp;gt;getPackageById(0, 297 );
        // Generic Location Price
        // (
        //  [id] =&amp;gt; 408
        //  [itemId] =&amp;gt; 297
        //  [locationGroupId] =&amp;gt;
        //  [oneTimeFee] =&amp;gt; 0
        //  [recurringFee] =&amp;gt; 199
        //  [setupFee] =&amp;gt; 0
        // )
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 408;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();

        // Put your serverId here
        $serverToFirewall = new stdClass();
        $serverToFirewall-&amp;gt;id = 12345;
        $container-&amp;gt;hardware[0] = $serverToFirewall;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }


    function placeOrderFortigateAppliance() {
        // The speed of the firewall needs to match speed of the server
        // $example-&amp;gt;getPackageById(0, 4337 );
        // 4337 , FORTIGATE_SECURITY_APPLIANCE , FortiGate Security Appliance
        // 4338 , FORTIGATE_SECURITY_APPLIANCE_HIGH_AVAILABILITY , FortiGate Security Appliance (High Availability)
        // Generic Location Price
        // [id] =&amp;gt; 21514
        // [itemId] =&amp;gt; 4337
        // [locationGroupId] =&amp;gt;
        // [recurringFee] =&amp;gt; 999
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 21514;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();
        // Put the vlan id that you want to protect here
        $container-&amp;gt;vlanId = 12345;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

}


$example = new Example();
// $example-&amp;gt;getAllPackages();
// $example-&amp;gt;getPackageById(0, 297 );
// $example-&amp;gt;placeOrderHardwareFirewall();
// $example-&amp;gt;getPackageById(0, 4337 );
// $example-&amp;gt;placeOrderFortigateAppliance();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderBareMetal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices = 1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if ($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function getActiveRamItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveRamItems();
        print_r($items);
    }

    function getActiveServerItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveServerItems();
        print_r($items);
    }



    function placeOrder() {

        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();
        $container = new stdClass();

        $priceArray = array(
            49485, //INTEL_XEON_2650_2_00
            36253, //OS_WINDOWS_2012_R2_FULL_DC_64_BIT_2         
            49405, //RAM_16_GB
            876, //DISK_CONTROLLER_NONRAID
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            274, //1_GBPS_PUBLIC_PRIVATE_NETWORK_UPLINKS
            50261, //BANDWIDTH_20000_GB
            21, //1_IP_ADDRESS
            906, //REBOOT_KVM_OVER_IP
            420, //UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT
            56, //MONITORING_HOST_PING_AND_TCP_SERVICE
            57, //NOTIFICATION_EMAIL_AND_TICKET
            58, // response, AUTOMATED_NOTIFICATION
            418, //NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
            413, //MCAFEE_HOST_INTRUSION_PROTECTION_WREPORTING
            594, //MCAFEE_VIRUSSCAN_ANTIVIRUS_WINDOWS                    
        );
        $container-&amp;gt;prices = array();
        foreach ($priceArray as $item) {
            $priceId = new stdClass();
            $priceId-&amp;gt;id = $item;
            $container-&amp;gt;prices[] = $priceId;
        }

        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Hardware_Server&amp;quot;;
        $container-&amp;gt;packageId = 273;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;location = 448994;  //DAL05
        $container-&amp;gt;serverCount = 1;

        $hardware = new stdClass();
        $hardware-&amp;gt;domain = &amp;quot;test.com&amp;quot;;
        $hardware-&amp;gt;hostname = &amp;quot;thisIsTest&amp;quot;;
        $container-&amp;gt;hardware = $hardware;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }
}


$example = new Example();
// $example-&amp;gt;getAllPackages();

// Your package needs to have both activeRamItems and activeServerItems to be orderable.
// $example-&amp;gt;getActiveRamItems(273);
// $example-&amp;gt;getActiveServerItems(273);

//All price ids are from this function
// $example-&amp;gt;getPackageById(273,0,1);

$example-&amp;gt;placeOrder();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>/php/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/orderSSLCert/</guid>
      <description>

&lt;h4 id=&#34;generating-a-csr:a798909b54a41db7cd3faf021a46bea5&#34;&gt;Generating a CSR&lt;/h4&gt;

&lt;p&gt;You will need a csr to make this request, it should be on your local file system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genrsa -out domain.key 2048
openssl req -new -sha256 -key domain.key -out domain.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    /*
    * Package 0 is the &amp;quot;Everything else&amp;quot; pacakge, which contains SSL certain. But if you didn&#39;t remember that
    * this function will get you that information
    */
    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }

    /*
    * Each package has a lot of items, so this function will show you all of those along with their prices. 
    * Search through it for the proper SSL item you want to order, and take note of its price
    */
    function getPackageById($id=0, $onlyShow=0) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                print_r($item-&amp;gt;prices); 
            }
        }
    }


    /*
    * Change verifyOrder to placeOrder when you are actually ready to make a certificate 
    */
    function placeOrder($csrFilename=&#39;./domain.csr&#39;) {

        $csr = file_get_contents($csrFilename);
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $addressInfo = new stdClass();
        $addressInfo-&amp;gt;address = new stdClass();
        $addressInfo-&amp;gt;address-&amp;gt;addressLine1 = &amp;quot;1234 fleet street&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;city = &amp;quot;Houston&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;countryCode = &amp;quot;US&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;postalCode =  &amp;quot;77002&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;state = &amp;quot;TX&amp;quot;;
        $addressInfo-&amp;gt;emailAddress =&amp;quot;chgallo@lablayer.info&amp;quot;;
        $addressInfo-&amp;gt;firstName = &amp;quot;Christopher&amp;quot;;
        $addressInfo-&amp;gt;lastName = &amp;quot;Gallo&amp;quot;;
        $addressInfo-&amp;gt;organizationName = &amp;quot;SoftLayer&amp;quot;;
        $addressInfo-&amp;gt;phoneNumber = &amp;quot;281-123-4567&amp;quot;;
        $addressInfo-&amp;gt;title = &amp;quot;Dev&amp;quot;; 

        $price = new stdClass();
        $price-&amp;gt;id = 1836;

        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Security_Certificate&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;serverCount = 1;
        $container-&amp;gt;serverType = &#39;apacheapachessl&#39;;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;certificateSigningRequest = $csr;

        $container-&amp;gt;technicalContact = $addressInfo;
        $container-&amp;gt;administrativeContact = $addressInfo;
        $container-&amp;gt;organizationInformation = $addressInfo;
        $container-&amp;gt;billingContact = $addressInfo;
        # Needs to be a VERY specific email @ the domain you are registering
        # admin / administrator / hostmaster / root / webmaster / mailmaster
        $container-&amp;gt;orderApproverEmailAddress = &amp;quot;admin@lablayer.info&amp;quot;;  

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        // print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

    /*
    * This info is required for the serverType property. 
    */
    function getServerTypes() {
        // http://sldn.softlayer.com/reference/services/SoftLayer_Security_Certificate_Request_ServerType
        $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Security_Certificate_Request_ServerType&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $types = $client-&amp;gt;getAllObjects();
        print_r($types);
    }

}


$example = new Example();
// Figure out which package has the SSL certs
$example-&amp;gt;getAllPackages();

// Package 0, item 964 is the ssl cert we want to see the prices for.
$example-&amp;gt;getPackageById(0, 964 );

// 964 , SSL_CERTIFICATE_RAPIDSSL_1_YEAR , RapidSSL - 1 year
// [id] =&amp;gt; 1836
// [setupFee] =&amp;gt; 19

$example-&amp;gt;getServerTypes();
/*
[1] =&amp;gt; stdClass Object
    (
        [description] =&amp;gt; Apache + ApacheSSL
        [id] =&amp;gt; 2
        [name] =&amp;gt; apacheapachessl
        [value] =&amp;gt; 22
    )
*/
$example-&amp;gt;placeOrder();    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>/php/ticket_filter/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./SoftLayer/SoapClient.class.php&#39;;
$apiUser = &#39;&#39;;
$key = &#39;&#39;;

$startDate = new DateTime(&#39;2015-05-28T10:05:25-06:00&#39;);

$ticketClient = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUser, $key);
$filter = new stdClass();
$filter-&amp;gt;tickets = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;operation = &#39;greaterThanDate&#39;;
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options = array();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0] = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;date&#39;;
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType-&amp;gt;operation = &#39;EMPLOYEE&#39;;

$mask = new SoftLayer_ObjectMask();
$mask-&amp;gt;tickets-&amp;gt;updates;

$ticketClient-&amp;gt;setObjectMask($mask);
$ticketClient-&amp;gt;setObjectFilter($filter);
$updates = $ticketClient-&amp;gt;getTickets();

print_r($updates);

//prints out some SOAP debugging
print_r($ticketClient-&amp;gt;__getLastRequest());
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a vyatta server with placeOrder</title>
      <link>/php/order_vyatta/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/order_vyatta/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./SoftLayer/SoapClient.class.php&#39;;
$apiUser = &#39;&#39;;
$key = &#39;&#39;;

$client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUser, $key);
$template = new stdClass();
$template_extra = new stdClass();
$template-&amp;gt;packageId = 174;
$template-&amp;gt;location  = 224092;
$template-&amp;gt;quantity  = 1;
$template_extra-&amp;gt;os = 21;  //vyatta
$template_extra-&amp;gt;hostname = &#39;foo-vga-small&#39;;
$template_extra-&amp;gt;domain = &#39;softlayer-singapore-test.com&#39;;

//These might be invalid now, please double check on ordering
$template_extra-&amp;gt;price_id = array(13739, // Single Quad Xeon 1270 3.4G 8M
                                   21010, // 4G
                                   878, // Raid
                                   //31693, // Raid 1
                                   1267, // 500G
                                   274, // 1GbE
                                   342, // 20T
                                   // 21, // 1IP
                                   56, // Ping/TCP Mon
                                   57, // Notification 
                                   );

$my_template = new stdClass();

 for ($cnt = 0; $cnt &amp;lt; $template-&amp;gt;quantity; $cnt++) {
    $domain = new stdClass();
    $domain-&amp;gt;hostname = &amp;quot;$template_extra-&amp;gt;hostname-$cnt&amp;quot;;
    $domain-&amp;gt;domain = $template_extra-&amp;gt;domain;
    $template-&amp;gt;hardware[] = $domain;
  }
if (empty($template-&amp;gt;imageTemplateGlobalIdentifier))
{
    $template_extra-&amp;gt;price_id[] = $template_extra-&amp;gt;os;
}

foreach ($template_extra-&amp;gt;price_id as $id) {
    $price = new stdClass();
    $price-&amp;gt;id = $id;
    $template-&amp;gt;prices[] = $price;
}
$my_template-&amp;gt;orderContainers = array();
$my_template-&amp;gt;orderContainers[0]-&amp;gt;prices = $template-&amp;gt;prices;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;hardware = $template-&amp;gt;hardware;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;quantity = $template-&amp;gt;quantity;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;location = $template-&amp;gt;location;
$my_template-&amp;gt;orderContainers[0]-&amp;gt;packageId = $template-&amp;gt;packageId;

print_r($my_template);
$result = $client-&amp;gt;verifyOrder($my_template);
print_r($result);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get top level billing items for all owned accounts</title>
      <link>/php/get_invoice_top_level_items/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_invoice_top_level_items/</guid>
      <description>&lt;p&gt;With a given date range, get all the invoice details for all of the owned brands, and all of their owned accounts. The $filter can be used to get just a single accounts invoices, just take off the -&amp;gt;allOwnedAccounts bits&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
require_once __DIR__.&#39;/vendor/autoload.php&#39;;


/**
* This class structure is mostly used so this can be run as a script.
* Most of the print statements use fancy bash color codes to make things pretty
*/
class topBillingItems
{

    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
        $this-&amp;gt;startDate = new DateTime(&#39;2015-02-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;));
        $this-&amp;gt;endDate = new DateTime(&#39;2015-03-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;));
    }

    /*!
    * Will get all the brands on an account, THEN all of those brand&#39;s accounts,
    * Then all of THEIR brands, then all of THEIR accounts. Then, go through each
    * of the final tier accounts, and get all the invoices, then all the billing items.
    *
    */
    function main() {

        //The First Object Mask. Used to get all the front line brands, which will have the
        //accounts that are actually buying things
        $objectMask = new \SoftLayer\Common\ObjectMask();
        $objectMask-&amp;gt;ownedBrands-&amp;gt;allOwnedAccounts-&amp;gt;ownedBrands;

        $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey);
        $client-&amp;gt;setObjectMask($objectMask);

        $response = $client-&amp;gt;getObject();

        //Start off with the main brand
        foreach ($response-&amp;gt;ownedBrands as $brand) {
            print &amp;quot;BRAND=\e[31m&amp;quot; . $brand-&amp;gt;keyName .  &amp;quot; ::&amp;quot; . $brand-&amp;gt;id . &amp;quot;\e[0m=\n&amp;quot;;

            //Go into each of the top brands accounts
            foreach ($brand-&amp;gt;allOwnedAccounts as $account) {
                print &amp;quot;==\e[32m&amp;quot; . $account-&amp;gt;companyName .&amp;quot;\e[0m\n&amp;quot;;

                //Go into each of those accounts brands...
                foreach ($account-&amp;gt;ownedBrands as $brand1) {
                    print &amp;quot;====\e[33m&amp;quot; . $brand1-&amp;gt;name .&amp;quot; ::&amp;quot; . $brand1-&amp;gt;id . &amp;quot;\e[0m\n&amp;quot;;
                    $brandInvoice = $this-&amp;gt;getAllBrandAccounts($brand1-&amp;gt;id);

                    //Go through each of the accounts on the brand
                    foreach ($brandInvoice as $brandAccount) {

                        //This is recursive and a very large data structure.
                        //we unset it here so it doesn&#39;t get in the way later
                        unset($brandAccount-&amp;gt;brand);
                        $this-&amp;gt;workAccount($brandAccount);

                    } //END foreach $brandInvoice
                } //END foreach $account-&amp;gt;ownedBrands
            } //END foreach $brand-&amp;gt;allOwnedAccounts
        } //END foreach $response-&amp;gt;ownedBrands
    }//END MAIN

    function getAllBrandAccounts($brandId) {

        //This filters out all invoices that are not in our date range.
        //all based on the invoices createDate
        $filter = new stdClass();
        $filter-&amp;gt;allOwnedAccounts = new stdClass();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices = new stdClass();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate = new stdClass();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;operation = &#39;betweenDate&#39;;
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options = array();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0] = new stdClass();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;startDate&#39;;
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($this-&amp;gt;startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1] = new stdClass();
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;name = &#39;endDate&#39;;
        $filter-&amp;gt;allOwnedAccounts-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;value = array($this-&amp;gt;endDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));

        //Mask for the front line brands, used to get all their accounts, and their invoices
        $brandMask = new \SoftLayer\Common\ObjectMask();
        $brandMask-&amp;gt;allOwnedAccounts-&amp;gt;invoices;

        //From that brand, get all the brand&#39;s owned accounts, with their invoices from the current month
        $brandClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Brand&#39;, $brandId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey);
        $brandClient-&amp;gt;setObjectMask($brandMask);
        $brandClient-&amp;gt;setObjectFilter($filter);
        return $brandClient-&amp;gt;getAllOwnedAccounts();

    }

    function workAccount($account) {

        print &amp;quot;=====\e[94m&amp;quot; . $account-&amp;gt;companyName .&amp;quot; ::&amp;quot; . $account-&amp;gt;id . &amp;quot;\e[0m\n&amp;quot;;
        //Used to get all the actual line items from an invoice
        $invoiceMask = new \SoftLayer\Common\ObjectMask();
        $invoiceMask-&amp;gt;items;
        $invoiceMask-&amp;gt;invoiceTotalAmount;
        //Go through each of the accounts monthly invoices
        foreach ($account-&amp;gt;invoices as $invoice) {
            print &amp;quot;Created: &amp;quot; . $invoice-&amp;gt;createDate . &amp;quot; TYPE: &amp;quot; . $invoice-&amp;gt;typeCode .&amp;quot;\n&amp;quot;;

            //Here we get the actual invoice and all the billing items inside of it
            $bClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Billing_Invoice&#39;, $invoice-&amp;gt;id , $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey);
            $bClient-&amp;gt;setObjectMask($invoiceMask);
            $bt = $bClient-&amp;gt;getObject();
            print &amp;quot;====\e[42;90m&amp;quot; . $bt-&amp;gt;invoiceTotalAmount .&amp;quot;\e[0m\n&amp;quot;;

            //Go through each item on the invoice and print out its decription + fee.
            //There are a few other fields that could be billable, but these are the main ones.
            foreach ($bt-&amp;gt;items as $lineItem) {
                unset($lineItem-&amp;gt;invoice);
                $fee = $lineItem-&amp;gt;recurringAfterTaxAmount + $lineItem-&amp;gt;oneTimeAfterTaxAmount;
                print &amp;quot;====\e[35m&amp;quot; . $lineItem-&amp;gt;description . &amp;quot; =&amp;gt; &amp;quot; . $fee . &amp;quot;$ \e[0m\n&amp;quot;;
            }

        }//end invoice
    }
}

$main = new topBillingItems();
$main-&amp;gt;main();

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Invoices</title>
      <link>/php/get_invoice/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_invoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
require_once __DIR__.&#39;/vendor/autoload.php&#39;;
 
$apiUser = &#39;&#39;;
$key = &#39;&#39;;

//The date does need to be in this specific format
$startDate = new DateTime(&#39;2014-11-01T13:05:25&#39;, new DateTimeZone(&#39;CST&#39;));
$endDate = new DateTime(&#39;2014-12-01T09:53:51&#39;, new DateTimeZone(&#39;CST&#39;));
 
$accountClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUser, $key);

$filter = new stdClass();
$filter-&amp;gt;invoices = new stdClass();
// $filter-&amp;gt;invoices-&amp;gt;accountId = new stdClass();
// $filter-&amp;gt;invoices-&amp;gt;accountId-&amp;gt;operation = &#39;= 391780&#39;;
$filter-&amp;gt;invoices-&amp;gt;createDate = new stdClass();
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;operation = &#39;betweenDate&#39;;
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options = array();
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0] = new stdClass();
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;startDate&#39;;
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1] = new stdClass();
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;name = &#39;endDate&#39;;
$filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;value = array($endDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));

$objectMask = new \SoftLayer\Common\ObjectMask();
$objectMask-&amp;gt;invoices; 
 
$accountClient-&amp;gt;setObjectFilter($filter);
$accountClient-&amp;gt;setObjectMask($objectMask);

$invoices = $accountClient-&amp;gt;getObject();

print_r($invoices);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade virtual guest</title>
      <link>/php/upgrade_virtual_guest/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/upgrade_virtual_guest/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
require_once &#39;./SoftLayer/XmlrpcClient.class.php&#39;;

$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = SoftLayer_XmlrpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUsername, $apiKey);

//The price of the item you want to upgrade to
$price1 = new \stdClass();
$price1-&amp;gt;id = 1641;

//The virtual guest you want to upgrade
$guest = new \stdClass();
$guest-&amp;gt;id = 7444860;

$priceClient = SoftLayer_XmlrpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, 46, $apiUsername, $apiKey);
$objectMask = new SoftLayer_ObjectMask();
$objectMask-&amp;gt;description;
$objectMask-&amp;gt;capacity;
$objectMask-&amp;gt;prices-&amp;gt;id;
$objectMask-&amp;gt;categories-&amp;gt;id;

$priceClient-&amp;gt;setObjectMask($objectMask);
$items = $priceClient-&amp;gt;getObject();
//Shows you what prices are available to select from
print_r($items);

$upgrade = new \stdClass();
$upgrade-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;;
$upgrade-&amp;gt;prices = array($price1);
$upgrade-&amp;gt;properties = new \stdClass();
$upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow;
$upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;name = &amp;quot;MAINTENANCE_WINDOW&amp;quot;;
$upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;value = &amp;quot;now&amp;quot;;
$upgrade-&amp;gt;virtualGuests = array($guest);
print_r($upgrade);

//change to placeOrder($upgrade) to actually make it happen
$response = $client-&amp;gt;verifyOrder($upgrade);
print_r($response);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get primary ip address record</title>
      <link>/php/primary_ip_address_record/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/primary_ip_address_record/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
require_once &#39;./SoftLayer/SoapClient.class.php&#39;;

$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$virtualGuestId = 1111111
$client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,   $virtualGuestId, $apiUsername, $apiKey);


$objectMask = new SoftLayer_ObjectMask();
$objectMask-&amp;gt;primaryNetworkComponent;
$objectMask-&amp;gt;primaryNetworkComponent-&amp;gt;primaryIpAddressRecord;

$client-&amp;gt;setObjectMask($objectMask);
$guest = $client-&amp;gt;getObject();
print_r($guest);



/*
=============== RESULT ===============
~/Code/softlayer-examples/testing/php  $ php getIpID.php
stdClass Object
(
    [accountId] =&amp;gt; 307608
    [createDate] =&amp;gt; 2015-06-12T15:37:58-06:00
    [dedicatedAccountHostOnlyFlag] =&amp;gt;
    [domain] =&amp;gt; test.lablayer.info
    [fullyQualifiedDomainName] =&amp;gt; salttest.test.lablayer.info
    [hostname] =&amp;gt; salttest
    [id] =&amp;gt; 10015277
    [lastPowerStateId] =&amp;gt;
    [lastVerifiedDate] =&amp;gt;
    [maxCpu] =&amp;gt; 1
    [maxCpuUnits] =&amp;gt; CORE
    [maxMemory] =&amp;gt; 1024
    [metricPollDate] =&amp;gt;
    [modifyDate] =&amp;gt; 2015-06-12T16:12:52-06:00
    [provisionDate] =&amp;gt; 2015-06-12T15:42:03-06:00
    [startCpus] =&amp;gt; 1
    [statusId] =&amp;gt; 1001
    [uuid] =&amp;gt; 7a9731a1-4c29-144b-8051-55507ff1f08b
    [globalIdentifier] =&amp;gt; 8f5ed47b-9864-418b-8966-e9d4a70742f8
    [managedResourceFlag] =&amp;gt;
    [primaryBackendIpAddress] =&amp;gt; 10.91.155.168
    [primaryIpAddress] =&amp;gt; 198.23.82.198
    [primaryNetworkComponent] =&amp;gt; stdClass Object
        (
            [createDate] =&amp;gt; 2015-06-12T15:38:26-06:00
            [guestId] =&amp;gt; 10015277
            [id] =&amp;gt; 5277729
            [macAddress] =&amp;gt; 06:51:99:7e:f9:ef
            [maxSpeed] =&amp;gt; 10
            [modifyDate] =&amp;gt; 2015-06-12T15:38:39-06:00
            [name] =&amp;gt; eth
            [networkId] =&amp;gt; 4043239
            [port] =&amp;gt; 1
            [speed] =&amp;gt; 10
            [status] =&amp;gt; ACTIVE
            [uuid] =&amp;gt; 61836774-e776-d480-75e5-bc45b74982c7
            [primaryIpAddress] =&amp;gt; 198.23.82.198
            [primaryIpAddressRecord] =&amp;gt; stdClass Object
                (
                    [id] =&amp;gt; 13751854
                    [ipAddress] =&amp;gt; 198.23.82.198
                    [isBroadcast] =&amp;gt;
                    [isGateway] =&amp;gt;
                    [isNetwork] =&amp;gt;
                    [isReserved] =&amp;gt;
                    [subnetId] =&amp;gt; 469930
                    [guestNetworkComponentBinding] =&amp;gt; stdClass Object
                        (
                            [ipAddressId] =&amp;gt; 13751854
                            [port] =&amp;gt;
                            [type] =&amp;gt; PRIMARY
                        )

                    [subnet] =&amp;gt; stdClass Object
                        (
                            [broadcastAddress] =&amp;gt; 198.23.82.199
                            [cidr] =&amp;gt; 29
                            [gateway] =&amp;gt; 198.23.82.193
                            [id] =&amp;gt; 469930
                            [isCustomerOwned] =&amp;gt;
                            [isCustomerRoutable] =&amp;gt;
                            [modifyDate] =&amp;gt; 2015-04-18T19:15:55-06:00
                            [netmask] =&amp;gt; 255.255.255.248
                            [networkIdentifier] =&amp;gt; 198.23.82.192
                            [networkVlanId] =&amp;gt; 359732
                            [sortOrder] =&amp;gt; 4
                            [subnetType] =&amp;gt; PRIMARY
                            [totalIpAddresses] =&amp;gt; 8
                            [usableIpAddressCount] =&amp;gt; 5
                            [version] =&amp;gt; 4
                        )

                )

        )

    [status] =&amp;gt; stdClass Object
        (
            [keyName] =&amp;gt; ACTIVE
            [name] =&amp;gt; Active
        )

)
*/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Required price IDs for package</title>
      <link>/php/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_required_price_id/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* follow the installation instructions to get SoftLayer API PHP Client working: https://github.com/softlayer/softlayer-api-php-client#installation */
require_once __DIR__.&#39;/vendor/autoload.php&#39;;

use SoftLayer\Common\ObjectMask;
use SoftLayer\SoapClient;

/**
 * Set your SoftLayer API username and key.
 */
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$packageId = 46;


$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey);
try {
    $mask = new SoftLayer\Common\ObjectMask();
    $mask-&amp;gt;configuration-&amp;gt;itemCategory;
    $client-&amp;gt;setObjectMask($mask);
    $configs = $client-&amp;gt;getConfiguration();
    $requiredCategories = array();

    foreach ($configs as $config) {
        if ($config-&amp;gt;isRequired == 1) {
            $requiredCategories[$config-&amp;gt;itemCategory-&amp;gt;id][&#39;name&#39;] = $config-&amp;gt;itemCategory-&amp;gt;name;
        }
    }
    $categories = array();
    $mask = new SoftLayer\Common\ObjectMask();
    $mask-&amp;gt;itemPrices-&amp;gt;categories;
    $client-&amp;gt;setObjectMask($mask);
    $prices = $client-&amp;gt;getItemPrices();

    foreach ($requiredCategories as $category =&amp;gt; $categoryName) {
        $i = 0;
        foreach ($prices as $price) {
            foreach ($price-&amp;gt;categories as $priceCategory) {
                if ($priceCategory-&amp;gt;id == $category) {
                    $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;id&#39;] = $price-&amp;gt;id;
                    $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;description&#39;] = $price-&amp;gt;item-&amp;gt;description;
                    asort($requiredCategories[$category][&#39;itemPrices&#39;][$i]);
                    asort($requiredCategories);
                    $i++;
                }
            }
        }
    }

    print_r($requiredCategories);
} catch ( Exception $e) {
    die( $e-&amp;gt;getMessage());
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve metric data for a single server.</title>
      <link>/php/get_monitoring_metrics/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>/php/get_monitoring_metrics/</guid>
      <description>&lt;p&gt;We will call the SoftLayer API to retrieve the monitoring agents,
 configuration template, and configuration values for a server instance.
 Then we will demonstrate how to find definitions that you have enabled for
 metric tracking, how to check that they are enabled, and how to then use them
 to get metrics for arbitrary dates.&lt;/p&gt;

&lt;p&gt;Note that the agent, section, sub-section, and definition names have already been
 pre-selected and in order for this example to work your server must have these
 configuration options enabled and be able to retrieve metrics for them through
the portal. If you wish to use additional or substitute names for any of those
shown below you can do so by looking at the current options available in the
 SoftLayer portal or by further debugging the output of this script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
 
// Include XmlrpcClient.class.php if you&#39;d like to use our XML-RPC client
// instead.
require_once(dirname(__FILE__) . &#39;/SoftLayer/SoapClient.class.php&#39;);

/**
 * Your SoftLayer API username.
 *
 * @var string
 */
$apiUsername = &#39;set me!&#39;;

/**
 * Your SoftLayer API key. Generate and API key at the SoftLayer customer
 * portal:
 * https://manage.softlayer.com/Administrative/apiKeychain
 *
 * @var string
 */
$apiKey = &#39;set me too!&#39;;

/**
 * The id number of the server whose metrics you wish to retrieve. Call the
 * getVirtualGuests() method in the SoftLayer_Account API service to retrieve a list
 * of the servers on your account.
 *
 * @var int
 */
$serverId = 1234;

/**
 * The date at which you wish to start the metric sample. Pass any string that
 * is compatible with the PHP strtotime() function.
 *
 * @var string
 */
$startDate = &#39;03/01/2014&#39;;

/**
 * The date at which you wish to end the metric sample.
 *
 * @var string
 */
$endDate = &#39;03/02/2014&#39;;

/**
 * For this example we&#39;ll be working with SoftLayer_Virtual_Guest, you can also work
 * with SoftLayer_Hardware_Server depending on the type of server you&#39;re interacting with.
 *
 * Create a connection to the SoftLayer_Virtual_Guest API service and call the
 * getMonitoringAgents() method to get the server&#39;s associated tracking object record.
 */
$client = Softlayer_SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $serverId, $apiUsername, $apiKey);

try {
    // getMonitoringAgents() returns an array of SoftLayer_Monitoring_Agent objects.
    // From here you can loop through these agents to perform different functions such as get graphs,
    // activate, deactivate, or run other functions on it.
    $monitoringAgents = $client-&amp;gt;getMonitoringAgents();
} catch (Exception $e) {
    die(&#39;Unable to retrieve server record: &#39; . $e-&amp;gt;getMessage());
}

/**
 * Find the id of the specific agent we are wanting, in this example the &amp;quot;Cpu, Disk, and Memory&amp;quot; monitoring agent.
 */
$cdmAgent = null;
foreach ($monitoringAgents as $agent) {
    if ($agent-&amp;gt;name == &#39;Cpu, Disk, and Memory Monitoring Agent&#39;) {
        $cdmAgent = $agent;
        break;
    }
}

/**
 * Next we can create an array of all configuration variables that we are able to track.
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 */
$client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

// Object mask to get all definitions that we need.
$objectMask = &#39;mask.definition.monitoringDataFlag&#39;;
$client-&amp;gt;setObjectMask($objectMask);

try {
    // getConfigurationValues() returns an array of
    // SoftLayer_Monitoring_Agent_Configuration_Value objects.
    $cdmConfigurationValues = $client-&amp;gt;getConfigurationValues();
} catch (Exception $e) {
    die(&#39;Unable to retrieve monitoring agent configuration template: &#39; . $e-&amp;gt;getMessage());
}

/**
 * SoftLayer_Monitoring_Agent_Configuration_Value is used to retrieve metric data types.
 * Check if the agent configuration value for each definition
 * has been enabled. Otherwise, we will not have any metric data.
 */
// Define the containers to hold the metric data types we will retrieve
$metricDataTypes = array();

foreach ($cdmConfigurationValues as $configurationValue) {

    // Ensure that this value is set to true
    if ((bool) $configurationValue-&amp;gt;value == false) {
        continue;
    }

    // Ensure that the monitoring data flag is true
    if ($configurationValue-&amp;gt;definition-&amp;gt;monitoringDataFlag !== true) {
        continue;
    }

    // Get the metricDataType for this configuration value
    $client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent_Configuration_Value&#39;, $configurationValue-&amp;gt;id, $apiUsername, $apiKey);
    try {
        $metricDataTypes[] = $client-&amp;gt;getMetricDataType();
    } catch (Exception $e) {
        die(&#39;Unable to retrieve metric data type: &#39; . $e-&amp;gt;getMessage());
    }
}

/**
 * Retrieving data for an individual metric.
 *
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 *
 * We will be retrieving the &amp;quot;Graph Total CPU Usage&amp;quot; metric data.
 */
$client = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

try {
    // getGraphData() returns a SoftLayer_Metric_Tracking_Object_Data object.
    $data = $client-&amp;gt;getGraphData($metricDataTypes, $startDate, $endDate);
    echo &amp;quot;Data retrieved! &amp;quot; . count($data) . &amp;quot; data points\n\r&amp;quot;;
} catch (Exception $e) {
    die(&#39;Unable to retrieve metric data: &#39; . $e-&amp;gt;getMessage());
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>